# IMPORTANT keep version string up-to-date and constistent with git tag
happy_hare_version := 4.0

f_version   := $(shell, printf '%s0\n' "$(happy_hare_version)" | sed -E 's/^([0-9]+)\.([0-9])([0-9]).*/\1.\2.\3/')
hh_message  := $(shell, echo "Happy Hare v$(f_version)")
unit_suffix := $(shell, [ -n "$$UNIT_NAME" ] && echo " - Unit '$(UNIT_NAME)'" || echo "")
title       := $(shell, [ "$F_MULTI_UNIT_ENTRY_POINT" = "y" ] && echo "$(hh_message) Configuration" || echo "$(hh_message) Configuration$(unit_suffix)")
caption     := $(shell, [ "$F_MULTI_UNIT_ENTRY_POINT" = "y" ] && echo "$(hh_message)" || echo "Configuration$(unit_suffix)")

# Used to convert a shell command result to a y/n value
to_bool = $(shell, $(1) && echo y || echo n)

# Used to get the serial device paths
serial               = $(shell, ls /dev/serial/by-id/* 2>/dev/null | grep 'Klipper_$(2)' | tail -n +$(1) | head -n 1)
serial_exists        = $(to_bool, [ -e '$(serial,$(1),$(2))' ])
serial_config        = $(shell, basename '$(serial,$(1),$(2))' | sed 's/-/_/g' | awk '{print "PARAM_SERIAL_" toupper($0)}')
buffer_serial_config = $(shell, basename '$(serial,$(1),$(2))' | sed 's/-/_/g' | awk '{print "PARAM_SERIAL_BUFFER_" toupper($0)}')

# Used for comment padding
pad = $(shell, printf "%-$(1)s" "$(2)")

# To allow multiline config strings.
# Important: Use $(comma) & $(quote) instead of real comma's or double quotes in multiline strings
# For portability, this is a posix version of: ml = $(shell, printf "$(1)" | sed -z "s/\\n/\\\\n/g")
comma := ,
quote := "
ml = $(shell, printf '%s' "$(1)" | awk -v ORS='\\n' '1')


### Start of configuration
mainmenu "$(title)"

config PARAM_HAPPY_HARE_VERSION
  string
  default "$(happy_hare_version)"

config FORMATTED_VERSION
  string
  default "$(f_version)"

config MULTI_UNIT
  bool
  default "$(F_MULTI_UNIT)"

config MULTI_UNIT_ENTRY_POINT
  bool
  default "$(F_MULTI_UNIT_ENTRY_POINT)"

if MULTI_UNIT_ENTRY_POINT || !MULTI_UNIT
  config PARAM_MMU_UNITS
    string
    default "$(UNIT_NAME)"
endif

if !MULTI_UNIT_ENTRY_POINT
  config UNIT_NAME
    string
    default "$(UNIT_NAME)"

  config MCU_NAME
    string
    default "$(MCU_NAME)"

  config UNIT_INDEX
    int
    default $(shell, echo "${UNIT_INDEX-0}")
endif

comment "$(pad,50,)"
comment "$(pad,50,(\\_/))"
comment "$(pad,50,( *,*))"
comment "$(pad,50,(\")_(\") $(caption))"
comment "$(pad,50,)"

# UI rendering option:
#  y to shows MMU additions menu inline with type
#  n to show as top level menu
config SHOW_MMU_ADDITIONS_WITH_TYPE
  bool
  default n

if MULTI_UNIT_ENTRY_POINT
  config PARAM_MMU_UNITS
    prompt "MMU unit names"
    help
      Comma-separated list of unit names. Careful: Use only alphanumeric characters.
      If this is the first time configuring mulit-unit from previous single-unit install
      then the first name must be mmu0 because that is how it was configured.
      E.g. "mmu0,mmu1"

      A separate configurator will be run for each MMU after this initial screen is closed

  comment "Shared System Options"
  source "toolheads/Kconfig"        # Toolhead Selection menu
  source "addons/Kconfig"           # Addon Macro Features
  source "Kconfig.options"          # Popular software options
  source "Kconfig.raw"              # Raw access to appropriate parameters
endif

if !MULTI_UNIT_ENTRY_POINT
  source "mmu_types/Kconfig"        # Base MMU type menu
  if !SHOW_MMU_ADDITIONS_WITH_TYPE
    source "mmu_additions/Kconfig"  # MMU Additions/Customization menu (if not inlined with mmu type)
  endif
  source "boards/Kconfig"           # MCU Selection menu
  source "Kconfig.serial"           # MCU Connection
  if !MULTI_UNIT
    source "toolheads/Kconfig"      # Toolhead Selection menu
    source "addons/Kconfig"         # Addon Macro Features
    source "Kconfig.options"        # Popular software options
  endif
  source "Kconfig.raw"              # Raw access to appropriate parameters
endif
