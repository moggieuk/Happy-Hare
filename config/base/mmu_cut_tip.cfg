########################################################################################################################
# Happy Hare supporting macros
#   Standalone Tip Cutting for "Filametrix" style toolhead cutters
#
# THIS FILE IS READ ONLY
#
# When using this macro it is important to turn off tip forming in your slicer
# (read the wiki: Slicer Setup & Toolchange-Movement pages)
# Then set the following parameters in mmu_parameters.cfg:
#
#   form_tip_macro: _MMU_CUT_TIP
#   force_form_tip_standalone: 1
#
# This will ensure this macro is always called either in out of a print
#
# NOTE:
# The park position of the filament is relative to the nozzle and
# represents where the end of the filament is after cutting. The park position
# is important and used by Happy Hare both to finish unloading the extruder
# as well as to calculate how far to advance the filament on the subsequent load.
# It is set dynamically in gcode with this construct:
#   SET_GCODE_VARIABLE MACRO=_MMU_CUT_TIP VARIABLE=output_park_pos VALUE=..
#
[gcode_macro _MMU_CUT_TIP]
description: Cut filament by pressing the cutter on a pin with a horizontal movement

# -------------------------- Internal Don't Touch -------------------------
variable_output_park_pos: 0 # Dynamically set in this macro

gcode:
    {% set final_eject = params.FINAL_EJECT|default(0)|int %}
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}
    {% set pin_loc_x, pin_loc_y = vars.pin_loc_xy|map('float') %}
    {% set pin_park_x_dist = vars['pin_park_x_dist']|float %}
    {% set retract_length = vars['retract_length']|float %}
    {% set simple_tip_forming = vars['simple_tip_forming']|default(true)|lower == 'true' %}
    {% set blade_pos = vars['blade_pos']|float %}
    {% set rip_length = vars['rip_length']|float %}
    {% set pushback_length = vars['pushback_length']|float %}
    {% set pushback_dwell_time = vars['pushback_dwell_time']|int %}
    {% set extruder_move_speed = vars['extruder_move_speed']|float %}
    {% set travel_speed = vars['travel_speed']|float %}
    {% set restore_position = vars['restore_position']|default(true)|lower == 'true' %}
    {% set extruder_park_pos = blade_pos + rip_length %}
    {% set pin_park_x_loc = pin_loc_x + pin_park_x_dist %}
    {% set pin_park_y_loc = pin_loc_y %}

    {% if "xy" not in printer.toolhead.homed_axes %}
        RESPOND MSG="Automatically homing XY"
        G28 X Y
        _FILAMETRIX_MOVE_IN_BOUNDS
    {% endif %}

    SAVE_GCODE_STATE NAME=_MMU_CUT_TIP_state # Save after possible homing operation to prevent 0,0 being recorded

    G90 # Absolute positioning
    M83 # Relative extrusion
    G92 E0

    # Step 0 - Pre checks to see if the user is getting what they expect
    {% if printer.mmu.extruder_residual_filament <= 0 %}
        RESPOND MSG="Warning: `toolhead_ooze_reduction` setting is <= 0 which suggests you have not correctly calibrated your toolhead. Cut position may be incorrect"
    {% endif %}

    # Step 1 - Calculate initial retract to save filament waste, repeat to allow some cooling
    {% set effective_retract_length = retract_length - printer.mmu.extruder_residual_filament - printer.mmu.toolchange_retract %}
    {% if effective_retract_length > 0 %}
        RESPOND MSG="Retracting filament {effective_retract_length}mm prior to cut"
        G1 E-{effective_retract_length} F{extruder_move_speed * 60}
        {% if simple_tip_forming %}
            G1 E{effective_retract_length / 2} F{extruder_move_speed * 60}
            G1 E-{effective_retract_length / 2} F{extruder_move_speed * 60}
        {% endif %}
    {% endif %}

    # Step 2 - Perform the cut
    _FILAMETRIX_GANTRY_SERVO_UP
    _FILAMETRIX_MOVE_TO_CUTTER_PIN PIN_PARK_X_LOC={pin_park_x_loc} PIN_PARK_Y_LOC={pin_park_y_loc}
    _FILAMETRIX_GANTRY_SERVO_DOWN
    _FILAMETRIX_DO_CUT_MOTION PIN_PARK_X_LOC={pin_park_x_loc} RIP_LENGTH={rip_length}
    _FILAMETRIX_GANTRY_SERVO_UP
    _MMU_EVENT EVENT="filament_cut"

    # Step 3 - Pushback of the tip residual into the hotend to avoid future catching (ideally past the PTFE/metal boundary)
    {% set effective_pushback_length = [pushback_length, retract_length - printer.mmu.extruder_residual_filament - printer.mmu.toolchange_retract]|min %}
    {% if effective_pushback_length > 0 %} 
        RESPOND MSG="Pushing filament fragment back {effective_pushback_length}mm after cut"
        G1 E{effective_pushback_length} F{extruder_move_speed * 60}
        G4 P{pushback_dwell_time}
        G1 E-{effective_pushback_length} F{extruder_move_speed * 60}
    {% endif %}
    
    # Final eject is for testing
    {% if final_eject %}
        G92 E0
        G1 E-80 F{extruder_move_speed * 60}
    {% endif %}

    # Dynamically set the required output variables for Happy Hare
    SET_GCODE_VARIABLE MACRO=_MMU_CUT_TIP VARIABLE=output_park_pos VALUE={extruder_park_pos}

    # Restore state and optionally position (usually on wipetower)
    RESTORE_GCODE_STATE NAME=_MMU_CUT_TIP_state MOVE={1 if restore_position else 0} MOVE_SPEED={travel_speed}


###########################################################################
# Helper macro to ensure toolhead is in bounds after home in case it is
# used as a restore position point
#
[gcode_macro _FILAMETRIX_MOVE_IN_BOUNDS]
description: Helper to move the toolhead to a legal position after homing
gcode:
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}
    {% set travel_speed = vars['travel_speed']|float %}

    {% set pos = printer.gcode_move.gcode_position %}
    {% set axis_minimum = printer.toolhead.axis_minimum %}
    {% set axis_maximum = printer.toolhead.axis_maximum %}
    {% set x = [axis_minimum.x, [axis_maximum.x, pos.x]|min]|max %}
    {% set y = [axis_minimum.y, [axis_maximum.y, pos.y]|min]|max %}
    G1 X{x} Y{y} F{travel_speed * 60}


###########################################################################
# Helper macro for tip cutting
#
[gcode_macro _FILAMETRIX_MOVE_TO_CUTTER_PIN]
description: Helper to move the toolhead to the target pin in either safe or faster way, depending on toolhead clearance
gcode:
    {% set pin_park_x_loc = params.PIN_PARK_X_LOC|float %}
    {% set pin_park_y_loc = params.PIN_PARK_Y_LOC|float %}
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}

    {% set safe_margin_x, safe_margin_y = vars.safe_margin_xy|map('float') %}
    {% set travel_speed = vars['travel_speed']|float %}

    {% if ((printer.gcode_move.gcode_position.x - pin_park_x_loc)|abs < safe_margin_x) or ((printer.gcode_move.gcode_position.y - pin_park_y_loc)|abs < safe_margin_y) %}
        # Make a safe but slower travel move
        G1 X{pin_park_x_loc} F{travel_speed * 60}
        G1 Y{pin_park_y_loc} F{travel_speed * 60}
    {% else %}
        G1 X{pin_park_x_loc} Y{pin_park_y_loc} F{travel_speed * 60}
    {% endif %}


###########################################################################
# Helper macro for tip cutting
#
[gcode_macro _FILAMETRIX_DO_CUT_MOTION]
description: Helper to do a single horizontal cut movement
gcode:
    {% set pin_park_x_loc = params.PIN_PARK_X_LOC | float %}
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}

    {% set pin_loc_x_compressed = vars['pin_loc_x_compressed']|float %}
    {% set cut_fast_move_fraction = vars['cut_fast_move_fraction']|float %}
    {% set cut_fast_move_speed = vars['cut_fast_move_speed']|float %}
    {% set cut_slow_move_speed = vars['cut_slow_move_speed']|float %}
    {% set cut_dwell_time = vars['cut_dwell_time']|float %}
    {% set evacuate_speed = vars['evacuate_speed']|float %}
    {% set rip_length = vars['rip_length']|float %}
    {% set rip_speed = vars['rip_speed']|float %}
    {% set fast_slow_transition_loc = (pin_loc_x_compressed - pin_park_x_loc) * cut_fast_move_fraction + pin_park_x_loc|float %}

    G1 X{fast_slow_transition_loc} F{cut_fast_move_speed * 60} # Fast move to initiate contact of the blade with filament
    G1 X{pin_loc_x_compressed} F{cut_slow_move_speed * 60} # Do the cut in slow move
    G4 P{cut_dwell_time}
    {% if rip_length > 0 %}
        G1 E-{rip_length} F{rip_speed * 60}
    {% endif %}
    G1 X{pin_park_x_loc} F{evacuate_speed * 60} # Evacuate


###########################################################################
# Helper macro for tip cutting
#
[gcode_macro _FILAMETRIX_GANTRY_SERVO_DOWN]
description: Operate optional gantry servo operated pin
gcode:
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}
    {% set gantry_servo_enabled = vars['gantry_servo_enabled']|default(true)|lower == 'true' %}
    {% set angle = vars['gantry_servo_down_angle']|float %}

    {% if gantry_servo_enabled %}
        SET_SERVO SERVO=mmu_gantry_servo ANGLE={angle}
    {% endif %}


###########################################################################
# Helper macro for tip cutting
#
[gcode_macro _FILAMETRIX_GANTRY_SERVO_UP]
description: Operate optional gantry servo operated pin
gcode:
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}
    {% set gantry_servo_enabled = vars['gantry_servo_enabled']|default(true)|lower == 'true' %}
    {% set angle = vars['gantry_servo_up_angle']|float %}

    {% if gantry_servo_enabled %}
        SET_SERVO SERVO=mmu_gantry_servo ANGLE={angle}
    {% endif %}

