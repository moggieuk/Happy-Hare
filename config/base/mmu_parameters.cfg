########################################################################################################################
# Happy Hare MMU Software
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Copyright (C) 2022-2025  moggieuk#6538 (discord)
#                          moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Main configuration parameters for the klipper module
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#
# Notes:
#   Macro configuration is specified separately in 'mmu_macro_vars.cfg'.
#   Full details in the Happy Hare wiki: https://github.com/moggieuk/Happy-Hare/wiki
#
[mmu_parameters [[UNIT_NAME]]]


# ██╗     ██╗███╗   ███╗██╗████████╗███████╗
# ██║     ██║████╗ ████║██║╚══██╔══╝██╔════╝
# ██║     ██║██╔████╔██║██║   ██║   ███████╗
# ██║     ██║██║╚██╔╝██║██║   ██║   ╚════██║
# ███████╗██║██║ ╚═╝ ██║██║   ██║   ███████║
# ╚══════╝╚═╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚══════╝
#
# Define the physical limits of your MMU. These settings will be respected regardless of individual speed settings.
#
gear_max_velocity: 300			# Never to be exceeded gear velocity regardless of specific parameters
gear_max_accel: 1500			# Never to be exceeded gear acceleration regardless of specific parameters
[% if MMU_HAS_SELECTOR %]
selector_max_velocity: 250		# Never to be exceeded selector velocity regardless of specific parameters
selector_max_accel: 1200		# Never to be exceeded selector acceleration regardless of specific parameters
[% endif %]


[% if MMU_HAS_SERVO %]
# ███████╗███████╗██████╗ ██╗   ██╗ ██████╗ 
# ██╔════╝██╔════╝██╔══██╗██║   ██║██╔═══██╗
# ███████╗█████╗  ██████╔╝██║   ██║██║   ██║
# ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██║   ██║
# ███████║███████╗██║  ██║ ╚████╔╝ ╚██████╔╝
# ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝   ╚═════╝ 
#
# MMU SELECTOR SERVO:
[% if MMU_HAS_SELECTOR %]
# Angle of the servo in three named positions
#   up   = tool is selected and filament is allowed to freely move through gate
#   down = to grip filament
#   move = ready the servo for selector move (optional - defaults to up)
# V2.4.0 on: These positions are only for initial config they are replaced with calibrated servo positions in `mmu_vars.cfg`
[% else %]
# Selector servo positions are stored in `mmu_vars.cfg` after calibration.
# Note that the "release angle" is by default the nearest position between calibrated selection angles. This can be overriden
# by setting and explicit servo_release_angle
[% endif %]
#
# Note that leaving the servo active when down can stress the electronics and is not recommended with EASY-BRD or ERB board
# unless the 5v power supply has been improved and it is not necessary with standard ERCF builds
# Make sure your hardware is suitable for the job!
#
servo_duration: [[PARAM_SERVO_DURATION]]			# Duration of PWM burst sent to servo (default non-active mode, automatically turns off)
servo_dwell: [[PARAM_SERVO_DWELL]]			# Minimum time given to servo to complete movement prior to next move
servo_always_active: [[PARAM_SERVO_ALWAYS_ACTIVE]] 			# CAUTION - CAN DAMAGE COMMON SERVOS, PLEASE USE AT YOUR OWN RISK: 1=Force servo to always stay active, 0=Release after movement
[% if MMU_HAS_SELECTOR %]
servo_active_down: [[PARAM_SERVO_ACTIVE_DOWN]]			# CAUTION - CAN DAMAGE COMMON SERVOS, PLEASE USE AT YOUR OWN RISK: 1=Force servo to stay active when down only, 0=Release after movement
servo_up_angle: [[PARAM_SERVO_UP_ANGLE]]			# ERCF: MG90S: 30  ; SAVOX SH0255MG: 140 ; Tradrack: 145
servo_down_angle: [[PARAM_SERVO_DOWN_ANGLE]]			# ERCF: MG90S: 140 ; SAVOX SH0255MG: 30  ; Tradrack: 1
servo_move_angle: [[PARAM_SERVO_MOVE_ANGLE]]			# Optional angle used when selector is moved (defaults to up position)
servo_buzz_gear_on_down: [[PARAM_SERVO_BUZZ_GEAR_ON_DOWN]]		# Whether to "buzz" the gear stepper on down to aid engagement
[% else %]
selector_gate_angles: [[PARAM_SELECTOR_GATE_ANGLES]]	# Optionally set default list of gate angles (overriden by calibration)
selector_bypass_angle: -1		# Optionally set default servo angle when bypass is selected, -1=No default
selector_release_angle: -1		# Optionally force a specific "release" angle, -1=Default (between gate angles) behavior
[% endif %]

[% endif %] ;; MMU_HAS_SERVO
# ███████╗██████╗ ███████╗███████╗██████╗ ███████╗
# ██╔════╝██╔══██╗██╔════╝██╔════╝██╔══██╗██╔════╝
# ███████╗██████╔╝█████╗  █████╗  ██║  ██║███████╗
# ╚════██║██╔═══╝ ██╔══╝  ██╔══╝  ██║  ██║╚════██║
# ███████║██║     ███████╗███████╗██████╔╝███████║
# ╚══════╝╚═╝     ╚══════╝╚══════╝╚═════╝ ╚══════╝
#
# MOVEMENT SPEEDS: Long moves are faster than the small ones and used for the bulk of the bowden movement. You can set two fast load speeds
# depending on whether pulling from the spool or filament buffer (if fitted and not the first time load). This can be helpful
# in allowing faster loading from buffer and slower when pulling from the spool because of the additional friction (prevents
# loosing steps). Unloading speed can be tuning if you have a rewinder system that imposes additional limits.
# NOTE: Encoder cannot keep up much above 450mm/s so make sure 'bowden_apply_correction' is off at very high speeds!
#
gear_from_spool_speed: 80		# mm/s Speed when loading from the spool (for the first time if has_filament_buffer: 1)
gear_from_spool_accel: 100		# Acceleration when loading from spool
[% if MMU_HAS_FILAMANT_BUFFER %]
gear_from_filament_buffer_speed: 150		# mm/s Speed when loading filament from buffer. Conservative is 100mm/s, Max around 400mm/s
gear_from_filament_buffer_accel: 400		# Normal acceleration when loading filament
[% endif %]
gear_unload_speed: 80			# mm/s Use (lower) speed when unloading filament (defaults to "from spool" speed)
gear_unload_accel: 100			# Acceleration when unloading filament (defaults to "from spool" accel)
#
gear_homing_speed: [[PARAM_GEAR_HOMING_SPEED]]			# mm/s Speed of gear stepper only homing moves (e.g. homing to gate or extruder)
#
gear_short_move_speed: 80		# mm/s Speed when making short moves (including incremental retracts with encoder)
gear_short_move_accel: 600		# Usually the same as gear_from_buffer_accel (for short movements)
gear_short_move_threshold: 70		# Move distance that controls application of 'short_move' speed/accel

[% if MMU_HAS_SELECTOR %]
# Selector movement speeds. (Accelaration is defined by physical MMU limits set above and passed to selector stepper driver)
#
selector_move_speed: [[PARAM_SELECTOR_MOVE_SPEED]]		# mm/s speed of selector movement (not touch)
selector_homing_speed: [[PARAM_SELECTOR_HOMING_SPEED]]		# mm/s speed of initial selector homing move (not touch)
selector_touch_speed: [[PARAM_SELECTOR_TOUCH_SPEED]]		# mm/s speed of all touch selector moves (if stallguard configured)

# Selector touch (stallguard) operation. If stallguard is configured, then this can be used to switch on touch movement which
# can detect blocked filament path and try to recover automatically but it is more difficult to set up
#
selector_touch_enable: [[PARAM_SELECTOR_TOUCH_ENABLE]]		# If selector touch operation configured this can be used to disable it 1=enabled, 0=disabled
[% endif %]

#  ██████╗  █████╗ ████████╗███████╗    ██╗      ██████╗  █████╗ ██████╗ 
# ██╔════╝ ██╔══██╗╚══██╔══╝██╔════╝    ██║     ██╔═══██╗██╔══██╗██╔══██╗
# ██║  ███╗███████║   ██║   █████╗      ██║     ██║   ██║███████║██║  ██║
# ██║   ██║██╔══██║   ██║   ██╔══╝      ██║     ██║   ██║██╔══██║██║  ██║
# ╚██████╔╝██║  ██║   ██║   ███████╗    ███████╗╚██████╔╝██║  ██║██████╔╝
#  ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ 
#
# GATE LOADING/UNLOADING: These settings control the loading and unloading filament at the gate which is the parking position
# inside the MMU. Typically this would be switch sensor but you can also use an encoder. Even with encoder the endstop can be
# a switch and the encoder used for move verifcation (see advanced 'gate_endstop_to_encoder' option). Note that the `encoder`
# method, due to the nature of its operation will overshoot a little. This is not a problem in practice because the
# overshoot will simply be compensated for in the subsequent move. A +ve parking distance moves towards the MMU, -ve
# moves back through the endstop towards the toolhead. If the MMU has multiple bowden tubes then it is possible to home
# at the extruder sensor and avoid long bowden moves!
#
# Possible gate_homing_endstop names:
#   encoder       - Detect filament position using movement of the encoder (if fitted)
#   mmu_gate      - Use gate endstop
#   mmu_gear      - Use individual per-gate endstop (type-B MMU's)
#   extruder      - Use extruder entry sensor (Only for some type-B designs, see [mmu_machine] require_bowden_move setting)
#
#gate_homing_endstop: [[PARAM_GATE_HOMING_ENDSTOP]]		# Name of gate endstop used for filament parking
#gate_homing_max: [[PARAM_GATE_HOMING_MAX]]			# Maximum move distance to home (or actual move distance if encoder endstop)
#gate_parking_distance: [[PARAM_GATE_PARKING_DISTANCE]]		# Parking position relative to homing endstop (-ve value means move forward)
#gate_preload_homing_max: [[PARAM_GATE_PRELOAD_HOMING_MAX]]		# Maximum homing distance to the mmu_gear endstop (if MMU is fitted with one)
#gate_preload_parking_distance: -10	# Parking position relative to mmu_gear endstop (-ve value means move forward) 
#[% if MMU_HAS_ENCODER %]
#gate_endstop_to_encoder: [[PARAM_GATE_ENDSTOP_TO_ENCODER]]		# Distance between gate endstop and encoder (IF both fitted. +ve if encoder after endstop)
#[% endif %]
#gate_unload_buffer: 50			# Amount to reduce the fast unload so that filament doesn't overshoot when parking
#[% if MMU_HAS_SELECTOR %]
#gate_load_retries: 2			# Number of times MMU will attempt to grab the filament on initial load (type-A designs)
#[% endif %]
#gate_autoload: 1			# If pre-gate sensor fitted this controls the automatic loading of the gate
#gate_final_eject_distance: [[PARAM_GATE_FINAL_EJECT_DISTANCE]]		# Additional distance to eject filament on MMU_EJECT to clear MMU grip

gate_homing_endstop: [[PARAM_GATE_HOMING_ENDSTOP]]		# Name of gate endstop used for filament parking
gate_homing_max: [[PARAM_GATE_HOMING_MAX]]			# Maximum extra move distance to home (or actual move distance if encoder endstop)
gate_parking_distance: [[PARAM_GATE_PARKING_DISTANCE]]		# Parking position relative to homing endstop (must be retraction unless endstop is mmu_gear)

gate_preload_endstop: # PAUL NEW proposed (normally the same as gate_homing_endstop)
gate_preload_homing_max: [[PARAM_GATE_PRELOAD_HOMING_MAX]]		# Maximum homing distance to the mmu_gear endstop (if MMU is fitted with one)
gate_preload_parking_distance: -10	# Parking position relative to mmu_gear endstop (-ve value means move forward) 

[% if MMU_HAS_ENCODER %]
gate_endstop_to_encoder: [[PARAM_GATE_ENDSTOP_TO_ENCODER]]		# Distance between gate endstop and encoder (IF both fitted. +ve if encoder after endstop)
[% endif %]
# PAUL REMOVE THIS gate_unload_buffer: 50			# Amount to reduce the fast unload so that filament doesn't overshoot when parking # PAUL move to bowden move
[% if MMU_HAS_SELECTOR %] # PAUL should be if MMU_HAS_SELECTOR_SERVO
gate_load_retries: 2			# Number of times MMU will attempt to grab the filament on initial load (type-A designs with servo)
[% endif %]
gate_autoload: 1			# If pre-gate sensor fitted this controls the automatic loading of the gate
gate_final_eject_distance: [[PARAM_GATE_FINAL_EJECT_DISTANCE]]		# Additional distance to eject filament on MMU_EJECT to clear MMU's grip


# ██████╗  ██████╗ ██╗    ██╗██████╗ ███████╗███╗   ██╗    ██╗      ██████╗  █████╗ ██████╗ 
# ██╔══██╗██╔═══██╗██║    ██║██╔══██╗██╔════╝████╗  ██║    ██║     ██╔═══██╗██╔══██╗██╔══██╗
# ██████╔╝██║   ██║██║ █╗ ██║██║  ██║█████╗  ██╔██╗ ██║    ██║     ██║   ██║███████║██║  ██║
# ██╔══██╗██║   ██║██║███╗██║██║  ██║██╔══╝  ██║╚██╗██║    ██║     ██║   ██║██╔══██║██║  ██║
# ██████╔╝╚██████╔╝╚███╔███╔╝██████╔╝███████╗██║ ╚████║    ███████╗╚██████╔╝██║  ██║██████╔╝
# ╚═════╝  ╚═════╝  ╚══╝╚══╝ ╚═════╝ ╚══════╝╚═╝  ╚═══╝    ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ 
#
# BOWDEN LOADING/UNLOADING: Settings that control filament movement in the bowden tube
#
bowden_homing_max: 2000			# Maximum attempted bowden move (for calibration). Should be larger than your actual bowden!

# These are the percentage of the calibrated bowden move which occurs at a fast speed (homing disabled). In most
# designs it is important that the bowden move doesn't overshoot it's target to allow for slower homing to the endstop.
# Note that additional "extra" homing distance is defined in the gate and extruder sections which is automatically added
# to the expected "slow" distance. Also note that before calibration all moves are slower homing moves.
#
bowden_fast_unload_portion: 95		# % of calibrated bowden length for fast (non-homing) unloading move
bowden_fast_load_portion: 95 		# % of calibrated bowden length for fast (non-homing) loading move
[% if MMU_HAS_ENCODER %]

# If you MMU is equiped with an encoder the following options are available:
# 
# In addition to different bowden loading speeds for buffer and non-buffered filament it is possible to detect missed
# steps caused by "jerking" on a heavy spool. If bowden correction is enabled Happy Hare will "believe" the encoder
# reading and make correction moves to bring the filament to within the 'bowden_allowable_load_delta' of the end of
# bowden position (this does require a reliable encoder and is not recommended for very high speed loading >350mm/s)
#
bowden_apply_correction: 0		# 1 to enable, 0 disabled
bowden_allowable_load_delta: 20.0	# How close in mm the correction moves will attempt to get to target
#
# This saftey check uses the encoder to verify the filament is free of extruder before the fast bowden movement to
# reduce possibility of grinding filament. If enabled the trigger can be tuned by setting the "error tolerance" which
# represents the fraction of allowable mismatch between actual movement and that seen by encoder. Setting to 50% tolerance
# usually works well. Increasing will make test more tolerant. Value of 100% essentially disables error detection
# 
bowden_pre_unload_test: 1		# 1 to check for bowden movement before full pull (slower), 0 don't check (faster)
bowden_pre_unload_error_tolerance: 50	# ADVANCED: tune pre_unload_test
[% endif %]


# ███████╗██╗  ██╗████████╗    ██╗  ██╗ ██████╗ ███╗   ███╗██╗███╗   ██╗ ██████╗ 
# ██╔════╝╚██╗██╔╝╚══██╔══╝    ██║  ██║██╔═══██╗████╗ ████║██║████╗  ██║██╔════╝ 
# █████╗   ╚███╔╝    ██║       ███████║██║   ██║██╔████╔██║██║██╔██╗ ██║██║  ███╗
# ██╔══╝   ██╔██╗    ██║       ██╔══██║██║   ██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║
# ███████╗██╔╝ ██╗   ██║██╗    ██║  ██║╚██████╔╝██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝
# ╚══════╝╚═╝  ╚═╝   ╚═╝╚═╝    ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝ 
#
# EXTRUDER HOMING: Happy Hare needs a reference "homing point" close to the extruder from which to accurately complete the
# loading of the toolhead. This homing operation takes place after the fast bowden load and it is anticipated that that load
# operation will leave the filament just shy of the homing point. If using a toolhead sensor this initial extruder
# homing is unnecessary (but can be forced) because the homing will occur inside the extruder for the optimum in accuracy.
# You still should set this homing method because it is also used for the determination and calibration of bowden length.
#
# In addition to an entry sensor "extruder" it is possible for Happy Hare to "feel" for the extruder gear entry
# by colliding with it. This can be done with encoder based collision detection, the compression of the sync-feedback
# (aka buffer) sensor or using "touch" (stallguard) on the gear stepper. Note that encoder collision detection is not
# completely deterministic and you will have to find the sweetspot for your setup by adjusting the TMC current reduction.
# Note that reduced current during collision detection can also prevent unecessary filament griding.
#
# Possible extruder_homing_endtop names:
#   filament_compression - If you have a "sync-feedback" sensor with compression switch configured
#                          Fast bowden load will move to extruder_homing_buffer distance before extruder gear, then home
#   extruder             - If you have a "filament entry" endstop configured (Requires 'extruder' endstop)
#                          Fast bowden load will move to extruder_homing_buffer distance before sensor, then home
#   collision            - Detect the collision with the extruder gear by monitoring encoder movement (Requires encoder)
#                          Fast bowden load will move to the extruder gears
#   mmu_gear_touch       - Use touch detection when the gear stepper hits the extruder (Requires stallguard)
#                          Fast bowden load will move to extruder_homing_buffer distance before extruder gear, then home
#   none                 - Don't attempt to home. Only possibiliy if lacking all sensor options
#                          Fast bowden load will move to the extruder gears. Option is fine if using toolhead sensor
# Note: The homing_endstop will be ignored ("none") if a toolhead sensor is available unless "extruder_force_homing: 1"
#
extruder_homing_endstop: [[PARAM_EXTRUDER_HOMING_ENDSTOP]]	# Filament homing method/endstop name (fallback if toolhead sensor not available)
extruder_homing_max: 100		# Maximum distance to advance in order to attempt to home the extruder

#PAUL##extruder_homing_buffer: 25		# Amount to reduce the fast bowden load so filament doesn't overshoot the extruder homing point MOVE moved to bowden

[% if MMU_HAS_ENCODER %]
extruder_collision_homing_current: 30	# % gear_stepper current (10%-100%) to use when homing to extruder homing (100 to disable)

[% endif %]
# If you have a toolhead sensor it will always be used as a homing point making the homing outside of the extruder
# potentially unnecessary. However you can still force this initial homing step by setting this option in which case
# the filament will home to the extruder and then home to the toolhead sensor in two steps
#
extruder_force_homing: 0


# ████████╗ ██████╗  ██████╗ ██╗     ██╗  ██╗███████╗ █████╗ ██████╗     ██╗      ██████╗  █████╗ ██████╗ 
# ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██║  ██║██╔════╝██╔══██╗██╔══██╗    ██║     ██╔═══██╗██╔══██╗██╔══██╗
#    ██║   ██║   ██║██║   ██║██║     ███████║█████╗  ███████║██║  ██║    ██║     ██║   ██║███████║██║  ██║
#    ██║   ██║   ██║██║   ██║██║     ██╔══██║██╔══╝  ██╔══██║██║  ██║    ██║     ██║   ██║██╔══██║██║  ██║
#    ██║   ╚██████╔╝╚██████╔╝███████╗██║  ██║███████╗██║  ██║██████╔╝    ███████╗╚██████╔╝██║  ██║██████╔╝
#    ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ 
#
# TOOLHEAD LOADING/UNLOADING: It is possible to define highly customized loading and unloading sequences, however, unless
# you have a specialized setup it is probably easier to opt for the built-in toolhead loading and unloading sequence which
# already offers a high degree of customization. If you need even more control then edit the _MMU_LOAD_SEQUENCE and
# _MMU_UNLOAD_SEQUENCE macros in mmu_sequence.cfg - but be careful!
#
# An MMU must have a known point at the end of the bowden from which it can precisely load the extruder. Generally this
# will either be the extruder entrance (which is controlled with settings above) or by homing to toolhead sensor. If
# you have toolhead sensor it is past the extruder gear and the driver needs to know the max distance (from end of
# bowden move) to attempt homing
#
toolhead_homing_max: 40			# Maximum distance to advance in order to attempt to home to defined homing endstop

# IMPORTANT: These next three settings are based on the physical dimensions of your toolhead
# Once a homing position is determined, Happy Hare needs to know the final move distance to the nozzle. There is only
# one correct value for your setup - use 'toolhead_ooze_reduction' (which corresponds to the residual filament left in
# your nozzle) to control excessive oozing on load. See doc for table of proposed values for common configurations.
#
# NOTE: If you have a toolhead sensor you can automate the calculation of these parameters! Read about the
# `MMU_CALIBRATE_TOOLHEAD` command (https://github.com/moggieuk/Happy-Hare/wiki/Blobbing-and-Stringing#---calibrating-toolhead)
#
toolhead_extruder_to_nozzle: [[PARAM_TOOLHEAD_EXTRUDER_TO_NOZZLE]]		# Distance from extruder gears (entrance) to nozzle
toolhead_sensor_to_nozzle: [[PARAM_TOOLHEAD_SENSOR_TO_NOZZLE]]		# Distance from toolhead sensor to nozzle (ignored if not fitted)
toolhead_entry_to_extruder: [[PARAM_TOOLHEAD_ENTRY_TO_EXTRUDER]]		# Distance from extruder "entry" sensor to extruder gears (ignored if not fitted)

# This setting represents how much residual filament is left behind in the nozzle when filament is removed, it is thus
# used to reduce the extruder loading length and prevent excessive blobbing but also in the calculation of purge volume.
# Note that this value can also be measured with the `MMU_CALIBRATE_TOOLHEAD` procedure
#
toolhead_residual_filament: [[PARAM_TOOLHEAD_RESIDUAL_FILAMENT]]		# Reduction in extruder loading length because of residual filament left behind

# TUNING: Finally, this is the last resort tuning value to fix blobbing. It is expected that this value is NEAR ZERO as
# it represents a further reduction in extruder load length to fix blobbing. If using a wipetower and you experience blobs
# on it, increase this value (reduce the quantity of filament loaded). If you experience gaps, decrease this value. If gaps
# and already at 0 then perhaps the 'toolhead_extruder_to_nozzle' or 'toolhead_residual_filament' settings are incorrect.
# Similarly a value >+5mm also suggests the four settings above are not correct. Also see 'retract' setting in
# 'mmu_macro_vars.cfg' for final in-print ooze tuning.
#
toolhead_ooze_reduction: [[PARAM_TOOLHEAD_OOZE_REDUCTION]]		# Reduction in extruder loading length to prevent ooze (represents filament remaining)

# Distance added to the extruder unload movement to ensure filament is free of extruder. This adds some degree of tolerance
# to slightly incorrect configuration or extruder slippage. However don't use as an excuse for incorrect toolhead settings
#
toolhead_unload_safety_margin: 10	# Extra movement safety margin (default: 10mm)

# If not synchronizing gear and extruder and you experience a "false" clog detection immediately after the tool change
# it might be because of a long bowden and/or large internal diameter that causes slack in the filament. This optional
# move will tighten the filament after a load by % of current clog detection length. Gear stepper will run at 50% current
#
toolhead_post_load_tighten: 60		# % of clog detection length, 0 to disable. Ignored if 'sync_to_extruder: 1'

# If synchronizing gear and extruder and you have a sync-feedback "buffer" this setting determines whether to use it
# to create neutral tension after loading
toolhead_post_load_tension_adjust: 1	# 1 to enable (recommended), 0 to disable

# If sync-feedback compression sensor is available this test will ensure the filament passes the extruder entry by checking
# for neutral tension when moving filament with just the extruder. Recommended with sprung loaded sync-feedback buffers.
# This is ignored if toolhead sensor is available.
toolhead_entry_tension_test: 1		# 1 to enable (recommended), 0 to disable

# ADVANCED: Controls the detection of successful extruder load/unload movement and represents the fraction of allowable
# mismatch between actual movement and that seen by encoder. Setting to 100% tolerance effectively turns off checking.
# Some designs of extruder have a short move distance that may not be picked up by encoder and cause false errors. This
# allows masking of those errors. However the error often indicates that your extruder load speed is too high or the
# friction is too high on the filament and in that case masking the error is not a good idea. Try reducing friction
# and lowering speed first!
#
toolhead_move_error_tolerance: 60


# ███╗   ███╗ ██████╗ ████████╗ ██████╗ ██████╗     ███████╗██╗   ██╗███╗   ██╗ ██████╗
# ████╗ ████║██╔═══██╗╚══██╔══╝██╔═══██╗██╔══██╗    ██╔════╝╚██╗ ██╔╝████╗  ██║██╔════╝
# ██╔████╔██║██║   ██║   ██║   ██║   ██║██████╔╝    ███████╗ ╚████╔╝ ██╔██╗ ██║██║     
# ██║╚██╔╝██║██║   ██║   ██║   ██║   ██║██╔══██╗    ╚════██║  ╚██╔╝  ██║╚██╗██║██║     
# ██║ ╚═╝ ██║╚██████╔╝   ██║   ╚██████╔╝██║  ██║    ███████║   ██║   ██║ ╚████║╚██████╗
# ╚═╝     ╚═╝ ╚═════╝    ╚═╝    ╚═════╝ ╚═╝  ╚═╝    ╚══════╝   ╚═╝   ╚═╝  ╚═══╝ ╚═════╝
#
# MOTOR SYNCHRONIZATION: This controls whether the extruder and gear steppers are synchronized during printing operations
# If you normally run with maxed out gear stepper current consider reducing it with 'sync_gear_current'
# If equipped with TMC drivers the current of the gear and extruder motors can be controlled to optimize performance.
# This can be useful to control gear stepper temperature when printing with synchronized motor
#
sync_to_extruder: 0                     # Gear motor is synchronized to extruder during print
sync_gear_current: 70                   # % of gear_stepper current (10%-100%) to use when syncing with extruder during print
sync_form_tip: 0                        # Synchronize during standalone tip formation (initial part of unload)
sync_purge: 0                           # Synchronize during standalone purging (last part of load)

[% if MMU_HAS_SELECTOR or MMU_HAS_SERVO %]
sync_to_extruder: [[PARAM_SYNC_TO_EXTRUDER]]			# Gear motor is synchronized to extruder during print
sync_gear_current: 70			# % of gear_stepper current (10%-100%) to use when syncing with extruder during print
sync_form_tip: [[PARAM_SYNC_FORM_TIP]]			# Synchronize during standalone tip formation (initial part of unload)
sync_purge: [[PARAM_SYNC_PURGE]]				# Synchronize during standalone purging (last part of load)

[% endif %]
# Optionally it is possible to leverage feedback from a "compression/expansion" sensor (aka "buffer") in the bowden
# path from MMU to extruder to ensure that the two motors are kept in sync as viewed by the filament (the signal feedback
# state can be binary supplied by one or two switches: -1 (expanded) and 1 (compressed) of proportional value between
# -1.0 and 1.0.
#
# If only "one half" of the sync-feedback is available (either compression-only or tension-only) then the rotation
# distance is always shifted based on the high/low multipliers, however if both tension and compression are available
# then the rotation distance will autotune to correct setting (recommend you also enable 'autotune_rotation_distance: 1'
# Note that proportional feedback sensors are continuously dynamic
#
# Possible buffer setups, forth option for type where neutral is when both sensors are active:
#
#   <------maxrange------>       <------maxrange------>       <------maxrange------>       <------maxrange------>
#        <--range--->                  <----range----->       <----range----->                       <> range=0
#   |====================|       |====================|       |====================|       |====================|
#        ^          ^                  ^                                     ^                       ^^
#   compression   tension        compression-only                      tension-only
#
sync_feedback_enable: [[PARAM_SYNC_FEEDBACK_ENABLE]]			# Turn off even if sensor is installed and active
sync_feedback_buffer_range: [[PARAM_SYNC_FEEDBACK_BUFFER_RANGE]]		# Travel in "buffer" between compression/tension or one sensor and end (see above)
sync_feedback_buffer_maxrange: [[PARAM_SYNC_FEEDBACK_BUFFER_MAXRANGE]]	# Absolute maximum end-to-end travel (mm) provided by buffer (see above)
sync_multiplier_high: 1.05		# Maximum factor to apply to gear stepper 'rotation_distance'
sync_multiplier_low: 0.95		# Minimum factor to apply


[% if MMU_HAS_ESPOOLER %]
# ███████╗███████╗██████╗  ██████╗  ██████╗ ██╗     ███████╗██████╗ 
# ██╔════╝██╔════╝██╔══██╗██╔═══██╗██╔═══██╗██║     ██╔════╝██╔══██╗
# █████╗  ███████╗██████╔╝██║   ██║██║   ██║██║     █████╗  ██████╔╝
# ██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║   ██║██║     ██╔══╝  ██╔══██╗
# ███████╗███████║██║     ╚██████╔╝╚██████╔╝███████╗███████╗██║  ██║
# ╚══════╝╚══════╝╚═╝      ╚═════╝  ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝
#                                                                  
# ESPOOLER: If your MMU has a dc motor (often N20) controlled respooler/assist then how it operates can be controlled with these
# settings. Typically the espooler will be controlled with PWM signal. This will be at the maximum at speeds equal or
# above 'espooler.max_stepper_speed'. The PWM signal will scale downwards towards 0 for slower speeds. The falloff being
# controlled by the 'espooler_speed_exponent' setting according to this formula and allows for non-linear characteristics
# the DC motor (0.5 is a good starting value).
# 
#     espooler_pwm = (stepper_speed / espooler_max_stepper_speed) ^ espooler_speed_exponent
#
# Regardless of h/w configuration you can enable/disable actions with the 'espooler_operations' list. E.g. remove 'play' to
# turn off operation while printing. Options are:
#
#    rewind - when filament is being unloaded under MMU control (aka respool)
#    assist - when filament is being loaded under MMU control (% of "rewind" speed but with minimum of "print" power)
#    print  - while printing. Generally set 'espooler_printing_power' to a low percentage just to allow motor to be turned
#             freely or set to 0 to enable/allow "burst" assist movements
#
# If using a digitally controlled espooler motor (not PWM) then you should turn off the "print" mode and set
# 'espooler_min_stepper_speed' to prevent "over movement"
#
espooler_min_distance: 30			# Individual stepper movements less than this distance will not active espooler
espooler_max_stepper_speed: 300			# Gear stepper speed at which espooler will be at maximum power
espooler_min_stepper_speed: 0			# Gear stepper speed at which espooler will become inactive (useful for non PWM control)
espooler_speed_exponent: 0.5			# Controls non-linear espooler power relative to stepper speed (see notes)
espooler_assist_reduced_speed: 50		# Control the % of the rewind speed that is applied to assisting load (want rewind to be faster)
espooler_printing_power: 0			# If >0, fixes the % of PWM power while printing. 0=allows burst movement
espooler_operations: rewind, assist, print	# List of operational modes (allows disabling even if h/w is configured)
#
# The following burst configuration is used only if 'print' operation is enabled and 'espooler_printing_power: 0'
#
espooler_assist_extruder_move_length: 100	# Distance (mm) extruder needs to move between each assist burst
espooler_assist_burst_power: 100		# The % power of the burst move
espooler_assist_burst_duration: 0.4		# The duration of the burst move is seconds
espooler_assist_burst_trigger: 0		# If trigger assist switch is fitted 0=disable, 1=enable
espooler_assist_burst_trigger_max: 3		# If trigger assist switch is fitted this limits the max number of back-to-back advances

[% endif %] ;; MMU_HAS_ESPOOLER


#  ██████╗ █████╗ ██╗     ██╗██████╗ ██████╗  █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
# ██╔════╝██╔══██╗██║     ██║██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
# ██║     ███████║██║     ██║██████╔╝██████╔╝███████║   ██║   ██║██║   ██║██╔██╗ ██║
# ██║     ██╔══██║██║     ██║██╔══██╗██╔══██╗██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
# ╚██████╗██║  ██║███████╗██║██████╔╝██║  ██║██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
#  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝
#
# CALIBRATION AND AUTOTUNE: These are auto calibration/tuning settings that can be used to ease initial setup and/or to
# tune calibration over time based on measured telemetry. Whether these auto-tuning features are available depends on
# MMU design and configured sensors (explained below). The setting will be ignored if the required sensors are not available
# but if they can operate they will suppress the normal calibration warnings (MMU_STATUS can still be used to view them).
# Note that these are initially set by the installer to recommended values
#
#  autocal_bowden_length      - the calibrated bowden length will be established on first load. It can also be set
#                               manually or reset with MMU_CALIBRATE_BOWDEN. Best results require the use of
#                               sync-feedback-compression or extruder sensor but gear-touch or encoder will also work.
#                               'extruder_homing_endstop' cannot be 'none'
#  autotune_bowden_length     - Once calibrated this setting will tune the bowden distance over time. Works best with
#                               toolhead sensor
#  skip_cal_rotation_distance - This will rely on installed default value (although it can still be calibrated). Usually
#                               a good choice if autotune is enabled
#  autotune_rotation_distance - Requires sync-feedback sensor (aka "buffer") with both compression and tension switches
#                               or accurately calibrated encoder (encoder works only with gate 0)
#  skip_cal_encoder           - Will rely on installed default value (although it can still be calibrated).
#                               Not recommended but allows for easier initial setup especially when 'autotune_encoder'
#                               is enabled.
#  autotune_encoder           - NOT IMPLEMENTED YET. Soon!
#
autocal_bowden_length: [[PARAM_AUTOCAL_BOWDEN_LENGTH]]	# Automated bowden length calibration. 1=automatic, 0=manual/off
autotune_bowden_length: [[PARAM_AUTOTUNE_BOWDEN_LENGTH]]	# Automated bowden length tuning. 1=on, 0=off
skip_cal_rotation_distance: [[PARAM_SKIP_CAL_ROTATION_DISTANCE]]	# Skip rotation distance calibration (MMU_CALIBRATE_GEAR), 1=skip, 0=require
autotune_rotation_distance: [[PARAM_AUTOTUNE_ROTATION_DISTANCE]]	# Automated gate calibration/tuning. 1=automatic, 0=manual/off
skip_cal_encoder: [[PARAM_SKIP_CAL_ENCODER]]		# Skip encoder calibration (MMU_CALIBRATE_ENCODER), 1=skip, 0=require
autotune_encoder: [[PARAM_AUTOTUNE_ENCODER]]		# Automated encoder tuning. 1=automatic, 0=manual/off


# ███╗   ███╗██╗███████╗ ██████╗
# ████╗ ████║██║██╔════╝██╔════╝
# ██╔████╔██║██║███████╗██║     
# ██║╚██╔╝██║██║╚════██║██║     
# ██║ ╚═╝ ██║██║███████║╚██████╗
# ╚═╝     ╚═╝╚═╝╚══════╝ ╚═════╝
#
# MISCELLANEOUS: Important you verify these work for you setup/workflow. Temperature and timeouts
#
timeout_pause: 72000		# Idle time out (printer shuts down) in seconds used when in MMU pause state
disable_heater: 600		# Delay in seconds after which the hotend heater is disabled in the MMU_PAUSE state
default_extruder_temp: 200	# Default temperature for performing swaps and forming tips when not in print (overridden by gate map)
extruder_temp_variance: 2	# When waiting for extruder temperature this is the +/- permissible variance in degrees (>= 1)
#
# Other workflow options
#
startup_home_if_unloaded: 0	# 1 = force mmu homing on startup if unloaded, 0 = do nothing
startup_reset_ttg_map: 0	# 1 = reset TTG map on startup, 0 = do nothing
show_error_dialog: 1		# 1 = show pop-up dialog in addition to console message, 0 = show error in console
[% if MMU_HAS_SELECTOR %]
preload_attempts: 5		# How many "grabbing" attempts are made to pick up the filament with preload feature
[% endif %]
strict_filament_recovery: 0	# If enabled with MMU with toolhead sensor, this will cause filament position recovery to
				# perform extra moves to look for filament trapped in the space after extruder but before sensor
filament_recovery_on_pause: 1	# 1 = Run a quick check to determine current filament position on pause/error, 0 = disable
retry_tool_change_on_error: 0	# Whether to automatically retry a failed tool change. If enabled Happy Hare will perform
				# the equivalent of 'MMU_RECOVER' + 'Tx' commands which usually is all that is necessary
				# to recover. Note that enabling this can mask problems with your MMU
bypass_autoload: 1		# If extruder sensor fitted this controls the automatic loading of extruder for bypass operation
has_filament_buffer: 1          # Whether the MMU has a filament buffer. Set to 0 if using Filamentalist or DC eSpooler, etc
#
# Advanced options. Don't mess unless you fully understand. Read documentation.
#
[% if MMU_HAS_ENCODER %]
encoder_move_validation: 1	# ADVANCED: 1 = Normally Encoder validates move distances are within given tolerance
				#           0 = Validation is disabled (eliminates slight pause between moves but less safe)
[% endif %]
print_start_detection: 1	# ADVANCED: Enabled for Happy Hare to automatically detect start and end of print and call
				# ADVANCED: MMU_PRINT_START and MMU_PRINT_END automatically. Harmless to leave enabled but can disable
                                #           if you think it is causing problems and known START/END is covered in your macros
gcode_load_sequence: 0		# VERY ADVANCED: Gcode loading sequence 1=enabled, 0=internal logic (default)
gcode_unload_sequence: 0	# VERY ADVANCED: Gcode unloading sequence, 1=enabled, 0=internal logic (default)


[% if MMU_HAS_SELECTOR or MMU_TYPE_CUSTOM %]
#  ██████╗██╗   ██╗███████╗████████╗ ██████╗ ███╗   ███╗    ███╗   ███╗███╗   ███╗██╗   ██╗
# ██╔════╝██║   ██║██╔════╝╚══██╔══╝██╔═══██╗████╗ ████║    ████╗ ████║████╗ ████║██║   ██║
# ██║     ██║   ██║███████╗   ██║   ██║   ██║██╔████╔██║    ██╔████╔██║██╔████╔██║██║   ██║
# ██║     ██║   ██║╚════██║   ██║   ██║   ██║██║╚██╔╝██║    ██║╚██╔╝██║██║╚██╔╝██║██║   ██║
# ╚██████╗╚██████╔╝███████║   ██║   ╚██████╔╝██║ ╚═╝ ██║    ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝
#  ╚═════╝ ╚═════╝ ╚══════╝   ╚═╝    ╚═════╝ ╚═╝     ╚═╝    ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝ 
#
# CUSTOM MMU: Normally all these settings are set based on your choice of 'mmu_vendor' and 'mmu_version' in mmu_hardware.cfg,
# but they can be overridden. If you have selected a vendor of "Other" and your MMU has a selector you must set these CAD based
# dimensions else you will get arbitrary defaults. You may also need to set additional attributes in '[mmu_machine]'
# section of mmu_hardware.cfg.
#
#cad_gate0_pos: 4.2					# Approximate distance from endstop to first gate. Used for rough calibration only
#cad_gate_width: 21.0					# Width of each gate
#cad_bypass_offset: 0					# Distance from limit of travel back to the bypass (e.g. ERCF v2.0)
#cad_last_gate_offset: 2.0				# Distance from limit of travel back to last gate
#cad_selector_tolerance: 10.0 				# How much extra selector movement to allow for calibration
[% if PARAM_SELECTOR_TYPE == "RotarySelector" %]
#cad_gate_directions = [1, 1, 0, 0]			# Directions of gear depending on gate (RotarySelector)
#cad_release_gates = [2, 3, 0, 1]			# Gate to move to when releasing filament (RotarySelector)
[% endif %]
[% endif %]


