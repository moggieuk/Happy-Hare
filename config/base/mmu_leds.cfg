########################################################################################################################
# Happy Hare MMU Software
# Supporting macros
#
# THIS FILE IS READ ONLY
#
# Copyright (C) 2022-2025  moggieuk#6538 (discord)
#                          moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Support for controlling optional LEDs called from Happy Hare state change events
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#
#
[gcode_macro _MMU_LED_ACTION_CHANGED]
description: Called when an action has changed to update LEDs
gcode:
    {% set action = params.ACTION|string %}
    {% set old_action = params.OLD_ACTION|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if action == "Loading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_blue_slow_exit STATUS_EFFECT=mmu_blue_slow_status
    {% elif action == "Loading Ext" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_blue_fast_exit STATUS_EFFECT=mmu_blue_fast_status
    {% elif old_action == "Exiting Ext" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_blue_slow_exit STATUS_EFFECT=mmu_blue_slow_status
    {% elif action == "Unloading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_blue_fast_exit STATUS_EFFECT=mmu_blue_fast_status
    {% elif action == "Heating" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_breathing_red_exit STATUS_EFFECT=mmu_breathing_red_status
    {% elif action == "Idle" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=default
    {% elif action == "Homing" or action == "Selecting" %}
        {% if old_action != "Homing" and old_action != "Checking" %}
            _MMU_SET_LED EXIT_EFFECT=mmu_white_fast_exit STATUS_EFFECT=off FADETIME=0
        {% endif %}
    {% elif action == "Checking" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=mmu_white_fast_status
    {% endif %}


[gcode_macro _MMU_LED_PRINT_STATE_CHANGED]
description: Called when print state changes to update LEDs
gcode:
    {% set state = params.STATE|string %}
    {% set old_state = params.OLD_STATE|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if state == "initialized" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_rainbow_exit ENTRY_EFFECT=mmu_rainbow_entry DURATION=8
    {% elif state == "printing" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif state == "pause_locked" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif state == "paused" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif state == "ready" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif state == "complete" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_sparkle_exit STATUS_EFFECT=default DURATION=20
    {% elif state == "error" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=default DURATION=20
    {% elif state == "cancelled" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif state == "standby" %}
        _MMU_SET_LED EXIT_EFFECT=off ENTRY_EFFECT=off STATUS_EFFECT=off LOGO_EFFECT=off
    {% endif %}


[gcode_macro _MMU_LED_GATE_MAP_CHANGED]
description: Called when gate map is updated to update LEDs
gcode:
    {% set gate = params.GATE|int %}
    {% set set_led_vars = printer['gcode_macro _MMU_SET_LED'] %}

    {% set current = set_led_vars['current_exit_effect'] %}
    {% set exit_effect=current if current in ["gate_status", "filament_color", "slicer_color"] else "" %}
    {% set current = set_led_vars['current_entry_effect'] %}
    {% set entry_effect=current if current in ["gate_status", "filament_color", "slicer_color"] else "" %}
    {% set current = set_led_vars['current_status_effect'] %}
    {% set status_effect=current if current in ["filament_color", "slicer_color"] else "" %}

    {% if exit_effect != "" or entry_effect != "" or status_effect != "" %}
        _MMU_SET_LED EXIT_EFFECT={exit_effect} ENTRY_EFFECT={entry_effect} STATUS_EFFECT={status_effect}
    {% endif %}


###########################################################################
# Support macro for MMU neopixel leds
#
# Effects for LED segments when not providing action status can be
# any effect name, "r,g,b" color, or built-in functional effects:
#   "off"             - LED's off
#   "on"              - LED's white
#   "gate_status"     - indicate gate availability
#   "filament_color"  - indicate filament color
#   "slicer_color"    - display slicer defined color for each gate
#
[gcode_macro _MMU_SET_LED]
description: Called when print state changes

# -------------------------- Internal Don't Touch -------------------------
variable_current_exit_effect: "none"
variable_current_entry_effect: "none"
variable_current_status_effect: "none"
variable_current_logo_effect: "none"

gcode:
    {% set mmu_leds = printer['mmu_leds'] %}
    {% set vars = printer['gcode_macro _MMU_LED_VARS'] %}

    {% if mmu_leds is defined and vars['led_enable'] %}
        {% set gate = params.GATE|default(-1)|int %}
        {% set duration = params.DURATION|default(-1)|int %}
        {% set fadetime = params.FADETIME|default(1)|int %}

        # Grab useful printer variables
        {% set mmu = printer['mmu'] %}
        {% set gate_status = mmu['gate_status'] %}
        {% set gate_color = mmu['gate_color'] %}
        {% set gate_color_rgb = mmu['gate_color_rgb'] %}
        {% set slicer_color_rgb = mmu['slicer_color_rgb'] %}
        {% set filament_pos = mmu['filament_pos'] %}
        {% set current_gate = mmu['gate'] %}
        {% set is_loaded = mmu['filament'] == 'Loaded' %}
        {% set num_gates = mmu['num_gates'] %}
        {% set index = gate + 1 %} # LEDs are 1-based

        # Build effects dict disabling non configured segments
        {% set effects = {
            'exit': (
                "" if mmu_leds['exit'] == 0
                else (
                    vars['default_exit_effect'] if params.EXIT_EFFECT|default("")|string == "default" 
                    else params.EXIT_EFFECT|default("")|string
                )
            ),
            'entry': (
                "" if mmu_leds['entry'] == 0
                else (
                    vars['default_entry_effect'] if params.ENTRY_EFFECT|default("")|string == "default" 
                    else params.ENTRY_EFFECT|default("")|string
                )
            ),
            'status': (
                "" if mmu_leds['status'] == 0
                else (
                    vars['default_status_effect'] if params.STATUS_EFFECT|default("")|string == "default" 
                    else params.STATUS_EFFECT|default("")|string
                )
            ),
            'logo': (
                "" if mmu_leds['logo'] == 0
                else (
                    vars['default_logo_effect'] if params.LOGO_EFFECT|default("")|string == "default" 
                    else params.LOGO_EFFECT|default("")|string
                )
            )
        } %}

        {% if not effects['exit'] == "" %}
            SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_exit_effect VALUE='"{effects['exit']}"'
        {% endif %}
        {% if not effects['entry'] == "" %}
            SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_entry_effect VALUE='"{effects['entry']}"'
       {% endif %}
        {% if not effects['status'] == "" %}
            SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_status_effect VALUE='"{effects['status']}"'
        {% endif %}

        {% if duration >= 0 %}
            UPDATE_DELAYED_GCODE ID=_MMU_RESET_LED DURATION={duration}
        {% endif %}

        {% for segment in ['exit', 'entry'] %}

            {% if effects[segment] == "off" %}
                {% if gate >= 0 %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds ({index})" FADETIME={fadetime}
                    SET_LED LED=mmu_{segment}_leds INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% else %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds" FADETIME={fadetime}
                    {% for i in range(1, num_gates + 1) %}
                        SET_LED LED=mmu_{segment}_leds INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT={1 if loop.last else 0}
                    {% endfor %}
                {% endif %}

            {% elif effects[segment] == "gate_status" %} # Filament availability
                {% if gate >= 0 %}
                    {% if gate == current_gate and is_loaded %}
                        _SET_LED_EFFECT EFFECT=mmu_blue_{segment}_{index} FADETIME={fadetime} REPLACE=1
                    {% elif gate_status[gate] == -1 %}
                        _SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={fadetime} REPLACE=1
                    {% elif gate_status[gate] > 0 %}
                        _SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={fadetime} REPLACE=1
                    {% else %}
                        _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds ({index})" FADETIME={fadetime}
                    {% endif %}
                {% else %}
                    {% for status in gate_status %}
                        {% if loop.index0 == current_gate and is_loaded %}
                            _SET_LED_EFFECT EFFECT=mmu_blue_{segment}_{loop.index} FADETIME={fadetime} REPLACE=1
                        {% elif status == -1 %}
                            _SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{loop.index} FADETIME={fadetime} REPLACE=1
                        {% elif status > 0 %}
                            _SET_LED_EFFECT EFFECT=mmu_green_{segment}_{loop.index} FADETIME={fadetime} REPLACE=1
                        {% else %}
                            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds ({loop.index})" FADETIME={fadetime}
                            SET_LED LED=mmu_{segment}_leds INDEX={loop.index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                        {% endif %}
                    {% endfor %}
                {% endif %}

            {% elif effects[segment] == "filament_color" %} # Filament color
                {% if gate >= 0 %}
                    {% set rgb = gate_color_rgb[gate] %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds ({index})"
                    SET_LED LED=mmu_{segment}_leds INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% else %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
                    {% for rgb in gate_color_rgb %}
                        {% set current_gate = loop.index0 %}
                        {% if gate_status[current_gate] != 0 %}
                            {% if gate_color[current_gate] == "" %}
                                {% set rgb = vars['white_light'] %}
                            {% elif rgb == (0,0,0) %}
                                {% set rgb = vars['black_light'] %}
                            {% endif %}
                        {% else %}
                            {% set rgb = vars['empty_light'] %}
                        {% endif %}
                        SET_LED LED=mmu_{segment}_leds INDEX={loop.index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT={1 if loop.last else 0}
                    {% endfor %}
                {% endif %}

            {% elif effects[segment] == "slicer_color" %} # Slicer color
                {% if gate >= 0 %}
                    {% set rgb = slicer_color_rgb[gate] %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds ({index})"
                    SET_LED LED=mmu_{segment}_leds INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% else %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
                    {% for rgb in slicer_color_rgb %}
                        SET_LED LED=mmu_{segment}_leds INDEX={loop.index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT={1 if loop.last else 0}
                    {% endfor %}
                {% endif %}

            {% elif "," in effects[segment] %} # Not effect, just simple RGB color
                {% set rgb = effects[segment].split(",") | map('trim') | list %}
                {% if gate >= 0 %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds ({index})"
                    SET_LED LED=mmu_{segment}_leds INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% else %}
                    _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
                    {% for i in range(1, num_gates + 1) %}
                        SET_LED LED=mmu_{segment}_leds INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT={1 if loop.last else 0}
                    {% endfor %}
                {% endif %}

            {% elif effects[segment] != "" %} # Simple effect by name
                {% if gate >= 0 %}
                    _SET_LED_EFFECT EFFECT={effects[segment]}_{index} FADETIME={fadetime} REPLACE=1
                {% else %}
                    _SET_LED_EFFECT EFFECT={effects[segment]} FADETIME={fadetime} REPLACE=1
                {% endif %}
            {% endif %}
        {% endfor %}

        # Status LED effects...
        {% set segment = "status" %}
        {% if effects[segment] == "off" %}
            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds" FADETIME={fadetime}
            SET_LED LED=mmu_{segment}_leds RED=0 GREEN=0 BLUE=0 TRANSMIT=1

        {% elif effects[segment] in ["filament_color", "on"] %} # Filament color or On
            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
            {% if current_gate >= 0 and filament_pos > 0 %}
                {% if status_effect != "on" and gate_color[current_gate] != "" %}
                    {% set rgb = gate_color_rgb[current_gate] %}
                    {% if rgb == (0,0,0) %}
                        {% set rgb = vars['black_light'] %}
                    {% endif %}
                {% else %}
                    {% set rgb = vars['white_light'] %}
                {% endif %}
                SET_LED LED=mmu_{segment}_leds RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED=mmu_{segment}_leds RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif effects[segment] == "slicer_color" %} # Slicer color
            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
            {% if current_gate >= 0 and filament_pos > 0 %}
                {% set rgb = slicer_color_rgb[current_gate] %}
                SET_LED LED=mmu_{segment}_leds RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED=mmu_{segment}_leds RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif "," in effects[segment] %} # No effect, just simple RGB color
            {% set rgb = effects[segment].split(",") | map('trim') | list %}
            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
            SET_LED LED=mmu_{segment}_leds RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1

        {% elif effects[segment] != "" %} # Simple effect by name
            _SET_LED_EFFECT EFFECT={effects[segment]} FADETIME={fadetime} REPLACE=1
        {% endif %}

        # Logo LED effects...
        {% set segment = "logo" %}
        {% if effects[segment] == "off" %}
            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds" FADETIME={fadetime}
            SET_LED LED=mmu_{segment}_leds RED=0 GREEN=0 BLUE=0 TRANSMIT=1

        {% elif "," in effects[segment] %} # No effect, just simple RGB color
            {% set rgb = effects[segment].split(",") | map('trim') | list %}
            _STOP_LED_EFFECTS LEDS="mmu_{segment}_leds"
            SET_LED LED=mmu_{segment}_leds RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1

        {% elif effects[segment] != "" %} # Simple effect by name
            _SET_LED_EFFECT EFFECT={effects[segment]} FADETIME={fadetime} REPLACE=1
        {% endif %}
    {% endif %}


###########################################################################
# Helper for LED control
#
[delayed_gcode _MMU_RESET_LED]
gcode:
    _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default LOGO_EFFECT=default


###########################################################################
# Helpers to support static LED without led-effects module installed
#
[gcode_macro _STOP_LED_EFFECTS]
description: Helper to convert effect into simple static LED
gcode:
    {% set vars = printer['gcode_macro _MMU_LED_VARS'] %}
    {% set leds = params.LEDS|string %}
    {% set fadetime = params.FADETIME|default(0.0)|float %}

    {% if vars['led_animation'] %}
        STOP_LED_EFFECTS LEDS="{leds}" FADETIME={fadetime}
    {% endif %}

[gcode_macro _SET_LED_EFFECT]
description: Helper to convert effect into simple static LED
variable_effect_to_static_color: {
    'mmu_breathing_red': (0.3,0,0),
    'mmu_white_slow': (0.8,0.8,0.8),
    'mmu_white_fast': (0.2,0.2,0.2),
    'mmu_blue_slow': (0,0,1),
    'mmu_blue_fast': (0,0,1),
    'mmu_strobe': (1,0,0),
    'mmu_green': (0,0.5,0),
    'mmu_orange': (0.5,0.2,0),
    'mmu_blue': (0,0,1),
    'mmu_curtain': (0.5,0.2,0),
    'mmu_sparkle': (0.3,0.3,0.3),
    'mmu_rainbow': (0.5,0.2,0),
    }
gcode:
    {% set vars = printer['gcode_macro _MMU_LED_VARS'] %}
    {% set effect = params.EFFECT|string %}
    {% set fadetime = params.FADETIME|default(0.0)|float %}
    {% set num_gates = printer['mmu']['num_gates'] %}

    {% if vars['led_animation'] %}
        SET_LED_EFFECT EFFECT={effect} FADETIME={fadetime} REPLACE=1
    {% else %}
        # Break down effect string. Can't use regexp, so...
        {% set parts = effect.split('_') %}
        {% if parts[-1].isdigit() %}
            {% set index = parts.pop() %}
        {% else %}
            {% set index = None %}
        {% endif %}
        {% set segment = parts.pop() %}
        {% set effect_name = parts|join('_') %}

        {% set rgb = effect_to_static_color.get(effect_name, (0,0,0)) %}
        {% if index %}
            SET_LED LED=mmu_{segment}_leds INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
        {% else %}
            SET_LED LED=mmu_{segment}_leds RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
        {% endif %}
    {% endif %}

###########################################################################
# Define LED effects used in control macros above
#   (requires [mmu_leds] setup in mmu_hardware.cfg else this will have no
#    effect and can be left as-is so it is ready when you want to add LEDs)
#
# [mmu_led_effect] is a simple wrapper that makes it easy to define based on you MMU setup
#
# E.g. If you have setup the following config in mmu_hardware.cfg for 4-gate MMU
#   [mmu_leds]
#   exit_leds:   neopixel:mmu_leds (1-4)
#   status_leds: neopixel:mmu_leds (5)
#
# E.g. You define "my_flash" like this:
#   [mmu_led_effect my_flash]
#
# This will create effects on each of these segments elements without laborous
# error prone repetition:
#   "mmu_flash_exit" on 'exit' portion of the strip (leds 1,2,3,4)
#   "mmu_flash_status" on the status LED (led 5)
#   "mmu_flash_exit_1" for gate 0 (led 1)
#   "mmu_flash_exit_2" for gate 1 (led 2)
#   "mmu_flash_exit_3" for gate 2 (led 3)
#   "mmu_flash_exit_4" for gate 3 (led 4)
#
# Then you can set effects with commands like:
#  SET_LED_EFFECT EFFECT=my_flash_exit     # apply effect to all exit leds
#  SET_LED_EFFECT EFFECT=my_flash_exit_2   # apply effect entry led for gate #1
#
# or set simple RBGW color with commands like:
#  SET_LED LED=mmu_exit_led INDEX=2 RED=50 GREEN=50 BLUE=50 WHITE=0 TRANSMIT=1
#
# Note that gates start at 0, but led indices and effect naming starts from 1,
# so remember: led_index = gate + 1
#
[mmu_led_effect mmu_breathing_red]
layers:       breathing 4 0 top (1,0,0)

[mmu_led_effect mmu_white_slow]
layers:       breathing 1.0 0 top (0.8,0.8,0.8)

[mmu_led_effect mmu_white_fast]
layers:       breathing 0.6 0 top (0.2,0.2,0.2)

[mmu_led_effect mmu_blue_slow]
layers:       breathing 1.0 0 top (0,0,1)

[mmu_led_effect mmu_blue_fast]
layers:       breathing 0.6 0 top (0,0,1)

[mmu_led_effect mmu_strobe]
layers:       strobe    1 1.5 add (1,1,1)
              breathing 2 0   difference (0.95,0,0)
              static    0 0   top (1,0,0)

[mmu_led_effect mmu_green]
layers:       static 0 0 top (0,0.5,0)

[mmu_led_effect mmu_orange]
layers:       static 0 0 top (0.5,0.2,0)

[mmu_led_effect mmu_blue]
layers:       static 0 0 top (0,0,1)

[mmu_led_effect mmu_curtain]
define_on:    exit
layers:       comet -1.5 1.0 add (0.4,0.4,0.4), (0,0,1)
              comet  1.5 1.0 top (0.4,0.4,0.4), (1,0,0)

[mmu_led_effect mmu_sparkle]
define_on:    exit
layers:       twinkle 8 0.15 top (0.3,0.3,0.3), (0.4,0,0.25)

[mmu_led_effect mmu_rainbow]
define_on:    entry,exit,status
layers:       gradient  0.8  0.5 add (0.3, 0.0, 0.0), (0.0, 0.3, 0.0), (0.0, 0.0, 0.3)
