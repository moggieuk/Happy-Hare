########################################################################################################################
# Happy Hare supporting macro configuration
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Supporting set of macros supplied with Happy Hare can be customized by editing the macro "variables" declared here.
#
# This configuration will automatically retained and upgraded between releases (a backup of previous config files will
# always be made for your reference). If you want to customize macros beyond what is possible through these variables
# it is highly recommended you copy the macro to a new name and change the callback macro name in 'mmu_parameters.cfg'
# That way the default macros can still be upgraded but your customization will be left intact
#


# PERSISTED STATE ---------------------------------------------------------
# Happy Hare stored configuration and state in the klipper variables file.
# Since there can only be a single 'save_variables' file, if you already
# have one you will need to merge the two and point this appropriately
#
[save_variables]
filename: {klipper_config_home}/mmu/mmu_vars.cfg


# PRINT START/END ---------------------------------------------------------
#   (base/mmu_software.cfg)
#
[gcode_macro _MMU_SOFTWARE_VARS]
description: Happy Hare optional configuration for print start/end checks
gcode: # Leave empty

# These variables control the behavor of the optional MMU_START_SETUP and MMU_START_LOAD_INITIAL_TOOL macros
variable_user_pre_initialize_extension      : "G28"	; Executed at start of MMU_START_SETUP. Commonly G28 to home
variable_octoprint_compat                   : False	; True to force compatibility with Octoprint print job streaming
variable_home_mmu                           : False	; True/False, Whether to home mmu before print starts
variable_check_gates                        : True	; True/False, Whether to check filament is loaded in all gates used
variable_load_initial_tool                  : True	; True/False, Whether to automatically load initial tool

# These variables control the behavor of the optional MMU_END macro
variable_eject_tool                         : True	; True/False, Whether to eject the tool at the end of the print
variable_reset_ttg                          : False	; True/False, Whether reset TTG map at end of print
variable_dump_stats                         : True	; True/False, Whether to display print stats at end of print


# STATE MACHINE CHANGES ---------------------------------------------------
#   (base/mmu_state.cfg)
#
[gcode_macro _MMU_STATE_VARS]
description: Happy Hare configuration for state change hooks
gcode: # Leave empty

# You can extend functionality to all Happy Hare state change macros by
# adding a command (or call to your gcode macro). E.g for additional
# LED logic
variable_user_action_changed_extension      : ''	; Executed after default logic with duplicate params
variable_user_print_state_changed_extension : ''	; Executed after default logic with duplicate params
variable_user_gate_map_changed_extension    : ''	; Executed after default logic with duplicate params


# LED CONTROL -------------------------------------------------------------
# Only configure if you have LEDs installed
#   (base/mmu_led.cfg)
#
[gcode_macro _MMU_LED_VARS]
description: Happy Hare led macro configuration variables
gcode: # Leave empty

# Default effects for LED segments when not providing action status
# This can be any effect name, 'r,g,b' color, or built-in functional effects:
#   'off'             - LED's off
#   'on'              - LED's white
#   'gate_status'     - indicate gate availability
#   'filament_color'  - indicate filament color
#   'slicer_color'    - display slicer defined set color for each gate (printer.mmu.slicer_color_rgb)
variable_led_enable             : True			; Whether LEDs are enabled at startup (MMU_LED can control)
variable_default_exit_effect    : "gate_status"		;    off|gate_status|filament_color|slicer_color
variable_default_entry_effect   : "filament_color"	;    off|gate_status|filament_color|slicer_color
variable_default_status_effect  : "filament_color"	; on|off|gate_status|filament_color|slicer_color
variable_white_light            : (1, 1, 1)		; RGB color for static white light
variable_black_light            : (.01, 0, .02)		; RGB color used to represent "black" (filament)
variable_empty_light            : (0, 0, 0)		; RGB color used to represent empty gate


# SEQUENCE MACRO - PARKING MOVEMENT CONTROL -------------------------------
# Configure carefully if you 'enable_park: True'
#   (base/mmu_sequence.cfg)
#
[gcode_macro _MMU_SEQUENCE_VARS]
description: Happy Hare sequence macro configuration variables
gcode: # Leave empty

# These contol the movement of the toolhead during toolchange.
# If 'enable_park: False' all movement is disabled in print except when
# handling runout where 'enable_runout_park' controls parking. Allows for
# parking just for runout handling or exclude runout. Parking when out of
# a print is controlled by 'enable_standalone_park'. If parking is enabled
# the 'restore_xy_pos' allows the restoration of toolhead x,y position to
# be deferred to the slicer. This results in less dwell time on the print
# (caution: the z-height will always be restored)
#
variable_enable_park            : True		; True = Enable parking move when printing (not runout), False = disable
variable_enable_park_runout     : True		; True = Enable parking move during runout handling, False = disable
variable_enable_park_standalone : True		; True = Enable parking move when not printing, False = disable
variable_restore_xy_pos         : "last"	; last|next|none - What x,y position the toolhead should travel to after a toolchange
variable_park_xy                : 50, 50	; Coordinates of park position for toolchange
variable_park_z_hop             : 1.0		; Additional Z_hop (mm) when toolchanging (works in and out of print)
variable_travel_speed           : 200		; XY travel speed in mm/s
variable_lift_speed             : 15		; Z travel speed in mm/s
variable_auto_home              : True		; True = Automatically home if necessary, False = disable
variable_park_after_form_tip    : False		; True = if tip cutting to delay move to park position, False = park immediately
variable_timelapse              : False		; True = take frame snapshot after load, False = disable

# You can extend functionality to all Happy Hare sequence macros by adding
# a command (or call to your gcode macro)
variable_user_pre_unload_extension  : ''	; Executed after default logic
variable_user_post_unload_extension : ''	; Executed after default logic
variable_user_pre_load_extension    : ''	; Executed after default logic
variable_user_post_load_extension   : ''	; Executed after default logic but before restoring toolhead position


# CUT_TIP -----------------------------------------------------------------
# Don't need to configure if using tip forming
#   (base/mmu_cut_tip.cfg)
#
[gcode_macro _MMU_CUT_TIP_VARS]
description: Happy Hare toolhead tip cutting macro configuration variables
gcode: # Leave empty

# Whether the toolhead tip cutting macro will return toolhead to initial
# position (usually wipetower) after the cut is complete. If using parking
# logic you may want to disable this and set 'park_after_form_tip: True'
variable_restore_position       : True		; True = return to initial position, False = don't return

# Distance from the internal nozzle tip to the cutting blade. This dimension
# is based on your toolhead and should not be used for tuning
variable_blade_pos              : 37.5		; Distance in mm from internal nozzle tip

# Distance to retract prior to making the cut, this reduces wasted filament
# (left behind in extruder) but might cause clog if set too large and/or if
# there are gaps in the hotend assembly.  This must be less than 'blade_pos'
variable_retract_length         : 32.5		; (5mm less than 'blade_pos' is a good starting point)

# Whether to perform a simple tip forming move after the initial retraction 
# Enabling this adds some time to the cutting but gives some additional cooling
# time of molten filament and avoids potential clogging on some hotends
variable_simple_tip_forming     : True		; True = Perform simple tip forming, False = skip

# This should be the position of the toolhead where the cutter arm just
# lightly touches the depressor pin
variable_pin_loc_xy             : 14, 250	; x,y coordinates of depressor pin

# This distance is added to 'pin_loc_x' to determine the starting position
# and to create a small saftely distance that aids in generating momentum
variable_pin_park_x_dist        : 5.0		; Distance in mm

# Position of the toolhead when the cutter is fully compressed. Should leave
# a small headroom (should be a bit larger than 0, or whatever xmin is) to
# avoid banging the toolhead or gantry
variable_pin_loc_x_compressed   : 0.5		; x coordinate

# Retract length and speed after the cut so that the cutter blade doesn't
# get stuck on return to origin position
variable_rip_length             : 1.0		; Distance in mm to retract to aid lever decompression (>= 0)
variable_rip_speed              : 3		; Speed mm/s

# Pushback of the remaining tip from the cold end into the hotend. This does
# not have to push back all the way, just sufficient to ensure filament
# fragment stays in hot end. Cannot be larger than 'retract_length'
variable_pushback_length        : 5.0		; Distance in mm
variable_pushback_dwell_time    : 0		; Time in ms to dwell after the pushback

# Speed related settings for tip cutting
# Note that if the cut speed is too fast, the steppers can lose steps.
# Therefore, for a cut:
# - We first make a fast move to accumulate some momentum and get the cut
#   blade to the initial contact with the filament
# - We then make a slow move for the actual cut to happen 
variable_travel_speed           : 150		; Speed mm/s
variable_cut_fast_move_speed    : 32		; Speed mm/s
variable_cut_slow_move_speed    : 8		; Speed mm/s
variable_evacuate_speed         : 150		; Speed mm/s
variable_cut_dwell_time         : 50		; Time in ms to dwell at the cut point
variable_cut_fast_move_fraction : 1.0		; Fraction of the move that uses fast move 
variable_extruder_move_speed    : 25		; Speed mm/s for all extruder movement

# Safety margin for fast vs slow travel. When traveling to the pin location
# we make a safer but longer move if we are closer to the pin than this
# specified margin. Usually setting these to the size of the toolhead
# (plus a small margin) should be good enough 
variable_safe_margin_xy         : 30, 30	; Approx toolhead width +5mm, height +5mm)

# If gantry servo option is installed, enable the servo and set up and down
# angle positions
variable_gantry_servo_enabled   : True		; True = enabled, False = disabled
variable_gantry_servo_down_angle: 55		; Angle for when pin is deployed
variable_gantry_servo_up_angle  : 180		; Angle for when pin is retracted


# FORM_TIP ----------------------------------------------------------------
# Don't need to configure if using tip cutting
#   (base/mmu_form_tip.cfg)
#
[gcode_macro _MMU_FORM_TIP_VARS]
description: Happy Hare tip forming macro configuration variables
gcode: # Leave empty

# Step 1 - Ramming
# Ramming is the initial squeeze of filament prior to cooling moves and is
# described in terms of total volume and progression of squeeze intensity
# printing/standalone. This can be separately controlled when printing or
# standalone
variable_ramming_volume            : 0		; Volume in mm^3, 0 = disabled (optionally let slicer do it)
variable_ramming_volume_standalone : 0		; Volume in mm^3, 0 = disabled

# Optionally set for temperature change (reduction). The wait will occur
# before nozzle separation if 'use_fast_skinnydip: False' else after cooling
# moves. Temperature will be restored after tip creation is complete
variable_toolchange_temp        : 0		; 0 = don't change temp, else temp to set
variable_toolchange_fan_assist  : False		; Whether to use part cooling fan for quicker temp change
variable_toolchange_fan_speed   : 50		; Fan speed % if using fan_assist enabled

# Step 2 - Nozzle Separation
# The filament is then quickly separated from the meltzone by a fast movement
# before then slowing to travel the remaining distance to cooling tube. The
# initial fast movement should be as fast as extruder can comfortably perform.
# A good starting point# for slower move is unloading_speed_start/cooling_moves.
# Too fast a slower movement can lead to excessively long tips or hairs
variable_unloading_speed_start  : 80		; Speed in mm/s for initial fast movement
variable_unloading_speed        : 18		; Speed in mm/s for slow move to cooling zone

# Step 3 - Cooling Moves
# The cooling move allows the filament to harden while constantly moving back
# and forth in the cooling tube portion of the extruder to prevent a bulbous
# tip forming. The cooling tube position is measured from the internal nozzle
# to just past the top of the heater block (often it is beneficial to add a
# couple of mm to ensure the tip is in the cooling section. The cooling tube
# length is then the distance from here to top of heatsink (this is the length
# length of the cooling moves). The final cooling move is a fast movement to
# break the string formed.
variable_cooling_tube_position  : 35		; Start of cooling tube. DragonST:35, DragonHF:30, Mosquito:30, Revo:35, RapidoHF:27
variable_cooling_tube_length    : 10		; Movement length. DragonST:15, DragonHF:10, Mosquito:20, Revo:10, RapidoHF:10
variable_initial_cooling_speed  : 10		; Inital slow movement (mm/s) to solidify tip and cool string if formed
variable_final_cooling_speed    : 50		; Fast movement (mm/s) Too fast: tip deformation on eject, Too Slow: long string/no seperation
variable_cooling_moves          : 4		; Number of back and forth cooling moves to make (2-4 is a good start)

# Step 4 - Skinnydip
# Skinnydip is an advanced final move that may have benefit with some
# material like PLA to burn off persistent very fine hairs. To work the
# depth of insertion is critical (start with it disabled and tune last)
# For reference the internal nozzle would be at a distance of
# cooling_tube_position + cooling_tube_length, the top of the heater
# block would be cooling_tube_length away.
variable_use_skinnydip          : False		; True = enable skinnydip, False = skinnydip move disabled
variable_skinnydip_distance     : 30		; Distance to reinsert filament into hotend starting from end of cooling tube
variable_dip_insertion_speed    : 30		; Medium/Slow insertion speed mm/s - Just long enough to melt the fine hairs, too slow will pull up molten filament
variable_dip_extraction_speed   : 70		; Speed mm/s - Around 2x Insertion speed to prevents forming new hairs
variable_melt_zone_pause        : 0		; Pause if melt zone in ms. Default 0
variable_cooling_zone_pause     : 0		; Puase if cooling zone after dip in ms. Default 0
variable_use_fast_skinnydip     : False		; False = Skip the toolhead temp change wait during skinnydip move

# Step 5 - Parking
# Park filament ready to eject
variable_parking_distance       : 0		; Position mm to park the filament at end of tip forming, 0 = leave where filament ends up after tip forming
variable_extruder_eject_speed   : 25		; Speed mm/s used for parking_distance (and final_eject when testing)


# CLIENT MACROS -----------------------------------------------------------
# If using the PAUSE/RESUME/CANCEL_PRINT macros shipped with Happy Hare
# these variables allow for customizaion and basic extension
#   (optional/client_macros.cfg)
#
[gcode_macro _MMU_CLIENT_VARS]
description: Happy Hare client macro configuration variables
gcode: # Leave empty

variable_retract                : 1.0		; Distance in mm to retract on pause or cancel
variable_retract_speed          : 30		; Speed mm/s of retraction movement
variable_unretract              : 1.0		; Distance in mm to extruder to undo retraction
variable_unretract_speed        : 30		; Speed mm/s of extrusion movement

# You can extend functionality by adding a command (or call to your gcode
# macro). E.g. for additional LED control
variable_user_pause_extension   : ''		; Executed after the klipper base pause
variable_user_resume_extension  : ''		; Executed before the klipper base resume
variable_user_cancel_extension  : ''		; Executed before the klipper base cancel_print


###########################################################################
# Tool change macros
# This is automatically created on installation but you can increase or
# reduce this list to match your number of tools in operation
# Note: it is annoying to have to do this but interfaces like Mainsail rely
# on real macro definitions for tools to be visible in the UI
#
{tx_macros}

