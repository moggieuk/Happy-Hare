########################################################################################################################
# Happy Hare MMU Software
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Copyright (C) 2022-2025  moggieuk#6538 (discord)
#                          moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Happy Hare MMU hardware config file for a physical MMU unit
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#

# MCU -----------------------------------------------------------------------------------------------------------------
# ███╗   ███╗ ██████╗██╗   ██╗
# ████╗ ████║██╔════╝██║   ██║
# ██╔████╔██║██║     ██║   ██║
# ██║╚██╔╝██║██║     ██║   ██║
# ██║ ╚═╝ ██║╚██████╗╚██████╔╝
# ╚═╝     ╚═╝ ╚═════╝ ╚═════╝ 
#
# Define MCU(s) used to connect with this MMU unit and optionally setup temperature monitors
#
# Serial connections are defined similar to:
#    serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_4F0034000A50425539393020-if00
# CANbus similar to:
#    canbus_uuid: 1234567890
#
[mcu unit0]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_4F0034000A50425539393020-if00

[temperature_sensor MCU_mmu_unit0]
sensor_type: temperature_mcu
sensor_mcu: unit0

[mcu buffer0]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_buffer-if00

[temperature_sensor MCU_buffer]
sensor_type: temperature_mcu
sensor_mcu: buffer


# MMU UNIT ------------------------------------------------------------------------------------------------------------
# ███╗   ███╗███╗   ███╗██╗   ██╗    ██╗   ██╗███╗   ██╗██╗████████╗
# ████╗ ████║████╗ ████║██║   ██║    ██║   ██║████╗  ██║██║╚══██╔══╝
# ██╔████╔██║██╔████╔██║██║   ██║    ██║   ██║██╔██╗ ██║██║   ██║   
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║    ██║   ██║██║╚██╗██║██║   ██║   
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝    ╚██████╔╝██║ ╚████║██║   ██║   
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝      ╚═════╝ ╚═╝  ╚═══╝╚═╝   ╚═╝   
#
# A mmu_unit is a physical MMU. It describes the type, characteristics and capabilities (often defined by vendor).
# The name of the unit is used to locate other compoents including it's toolhead steppers, optional encoder
# and espooler. You should create a [mmu_unit XXX] section for every MMU connected to this printer. The XXX
# name should appear in the 'units' on the [mmu_machine] and be used in the mmu_toolhead and accessary name
# as illustrated
#
[mmu_unit unit0]

num_gates: 4			# Number of gates/lanes *this* mmu_unit

# MMU Vendor & Version is used to automatically configure some parameters and validate configuration
#
vendor: VVD				# MMU family
version: 1.0				# MMU hardware version number (add mod suffix documented above)
#
# The following attributes are set internally from vendor/version above. Only uncomment to customize the vendor
# default if you known what you are doing or for custom ("Other") designs
#
#selector_type: IndexedSelector		# E.g. LinearSelector (type-A), VirtualSelector (type-B), MacroSelector, RotarySelector, ...
#variable_bowden_lengths: 0		# 1 = If MMU design has different bowden lengths per gate, 0 = bowden length is the same
#variable_rotation_distances: 1		# 1 = If MMU design has dissimilar drive/BMG gears, thus rotation distance, 0 = One drive gear (e.g. Tradrack)
#require_bowden_move: 1			# 1 = If MMU design has bowden move that is included in load/unload, 0 = zero length bowden (skip bowden move)
#filament_always_gripped: 0		# 1 = Filament is always trapped by MMU (most type-B designs), 0 = MMU can release filament
has_bypass: 0				# 1 = Bypass gate available, 0 = No filament bypass possible

#display_name: Vivid			# Display name of mmu_unit in UI's. Defaults to the vendor name
buffer: unit0				# Name of sync-feeback buffer if fitted (can be shared with other mmu_units))



# MMU TOOLHEAD ========================================================================================================
# ███╗   ███╗███╗   ███╗██╗   ██╗    ████████╗ ██████╗  ██████╗ ██╗     ██╗  ██╗███████╗ █████╗ ██████╗ 
# ████╗ ████║████╗ ████║██║   ██║    ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██║  ██║██╔════╝██╔══██╗██╔══██╗
# ██╔████╔██║██╔████╔██║██║   ██║       ██║   ██║   ██║██║   ██║██║     ███████║█████╗  ███████║██║  ██║
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║       ██║   ██║   ██║██║   ██║██║     ██╔══██║██╔══╝  ██╔══██║██║  ██║
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝       ██║   ╚██████╔╝╚██████╔╝███████╗██║  ██║███████╗██║  ██║██████╔╝
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝        ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ 
#
# Each mmu_unit has a "toolhead" that is similar to a printer toolhead and created automatically based on hardware
# described below. It is always composed of one or more filament drive (gear) steppers, optionally, depending on type,
# a selector stepper and/or a servo
#
# Note about "touch" endstops: Happy Hare provides extremely flexible homing options using both single steppers or
# synced steppers. The "touch" option leverages stallguard and thus requires the appropriate 'diag_pin' and stallguard
# parameters set on the TMC driver section. If you have the diag_pin exposed, it is harmless to define this because
# they will only be used when explicitly needed and configured.
#
# Touch option for each stepper provides these benefits / possibilities (experimental):
#  - on extruder stepper allows for the automatic detection of the nozzle!
#  - on selector stepper allows for the automatic detection of filament stuck in the gate and subsequent recovery
#  - on gear stepper allows for the automatic detection of the extruder entrance
#
# In summary, "touch" homing with your MMU is an advanced option that requires patience and careful tuning. Everything
# works with regular endstops and there are workaround options for certain homing points (like extruder entry) in
# the absence of any endstop. I'm really interested in creative setups. Ping me on Discord (moggieuk#6538)


# FILAMENT DRIVE GEAR STEPPER(S) --------------------------------------------------------------------------------------
#  ██████╗ ███████╗ █████╗ ██████╗
# ██╔════╝ ██╔════╝██╔══██╗██╔══██╗
# ██║  ███╗█████╗  ███████║██████╔╝
# ██║   ██║██╔══╝  ██╔══██║██╔══██╗
# ╚██████╔╝███████╗██║  ██║██║  ██║
#  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
#
# Note that 'toolhead' & 'mmu_gear' endstops will automatically be added if a toolhead sensor or gate sensor is defined
#

[tmc2209 stepper_mmu_gear_unit0]
uart_pin: unit0:PB7
run_current: 0.7
hold_current: 0.1			# Recommend to be small if not using "touch" or move (TMC stallguard)
interpolate: True
sense_resistor: 0.110			# Usually 0.11, 0.15 for BTT TMC2226
stealthchop_threshold: 0		# Spreadcycle has more torque and better at speed

[stepper_mmu_gear_unit0]
step_pin: unit0:PB6
dir_pin: unit0:PB5
enable_pin: !unit0:PB8
rotation_distance: 7.54			# 7.8
microsteps: 16
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree


# SELECTOR STEPPER ----------------------------------------------------------------------------------------------------
# ███████╗███████╗██╗     ███████╗ ██████╗████████╗ ██████╗ ██████╗ 
# ██╔════╝██╔════╝██║     ██╔════╝██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗
# ███████╗█████╗  ██║     █████╗  ██║        ██║   ██║   ██║██████╔╝
# ╚════██║██╔══╝  ██║     ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗
# ███████║███████╗███████╗███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║
# ╚══════╝╚══════╝╚══════╝╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝
#
# Consult doc if you want to setup selector for "touch" homing instead or physical endstop
#
[tmc2209 stepper_mmu_selector_unit0]
uart_pin: unit0:PB3
run_current: 0.8
hold_current: 0.1			# Recommend to be small if not using "touch" or move (TMC stallguard)
interpolate: True
sense_resistor: 0.110			# Usually 0.11, 0.15 for BTT TMC2226
stealthchop_threshold: 0		# Spreadcycle has more torque and better at speed

[stepper_mmu_selector_unit0]
step_pin: unit0:PD3
dir_pin: unit0:PD2
enable_pin: !unit0:PB4
rotation_distance: 360
microsteps: 16 				# Don't need high fidelity
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
#endstop_pin: !unit0:PD0
#endstop_name: mmu_sel_home
extra_endstop_pins: !unit0:PD0, !unit0:PA15, !unit0:PD1, !unit0:PC13
extra_endstop_names: unit0_0, unit0_1, unit0_2, unit0_3

# END OF MMU TOOLHEAD ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



# FILAMENT SENSORS ----------------------------------------------------------------------------------------------------
# ███████╗███████╗███╗   ██╗███████╗ ██████╗ ██████╗ ███████╗
# ██╔════╝██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝
# ███████╗█████╗  ██╔██╗ ██║███████╗██║   ██║██████╔╝███████╗
# ╚════██║██╔══╝  ██║╚██╗██║╚════██║██║   ██║██╔══██╗╚════██║
# ███████║███████╗██║ ╚████║███████║╚██████╔╝██║  ██║███████║
# ╚══════╝╚══════╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝
#
# Define the pins for optional sensors in the filament path. A single [mmu_sensors] section is defined to cover ALL
# the gates of the mmu_unit and gate numbers always start with 0. All but the pre-gate sensors will be automatically
# setup as both endstops (for homing) and sensors for visibility purposes
#
#   'pre_gate_switch_pin_X'  .. 'mmu_pre_gate_X' sensor detects filament at entry to MMU. X=gate number (0..N)
#   'post_gear_switch_pin_X' .. 'mmu_gear_X' post gear sensor for each filament
#   'gate_switch_pin'        .. 'mmu_gate' shared sensor detects filament past the gate of this MMU
#
# Configuration is flexible: Simply define pins for any sensor you want to enable, if pin is empty it will be
# ignored or you can also just comment out what you are not using.
#
[mmu_sensors unit0]
pre_gate_switch_pin_0: !unit0:PA0
pre_gate_switch_pin_1: !unit0:PA1
pre_gate_switch_pin_2: !unit0:PA2
pre_gate_switch_pin_3: !unit0:PA3

post_gear_switch_pin_0: buffer0:PA0
post_gear_switch_pin_1: buffer0:PA1
post_gear_switch_pin_2: buffer0:PA2
post_gear_switch_pin_3: buffer0:PA3

#gate_switch_pin:



# LED SUPPORT (OPTIONAL) -----------------------------------------------------------------------------------------------
# ██╗     ███████╗██████╗ ███████╗
# ██║     ██╔════╝██╔══██╗██╔════╝
# ██║     █████╗  ██║  ██║███████╗
# ██║     ██╔══╝  ██║  ██║╚════██║
# ███████╗███████╗██████╔╝███████║
# ╚══════╝╚══════╝╚═════╝ ╚══════╝
#
# Define mmu leds, both the "neopixel" config and [mmu_led] to define their purpose
#
[neopixel mmu_leds_1]
pin: unit0:PC6
chain_count: 14
color_order: GRB

[neopixel mmu_leds_2]
pin: unit0:PC7
chain_count: 14
color_order: GRB

# MMU LED EFFECT SEGMENTS ----------------------------------------------------------------------------------------------
# Define neopixel LEDs for your MMU. The chain_count must be large enough for your desired ranges:
#   exit   .. this set of LEDs, one for every gate, usually would be mounted at the exit point of the gate
#   entry  .. this set of LEDs, one for every gate, could be mounted at the entry point of filament into this MMU/buffer
#   status .. these LED. represents the status of the MMU (and selected filament). More than one status LED is possible
#   logo   .. these LEDs don't change during operation and are designed lighting a logo. Multiple logo LEDs are possible
#
# Note that all sets are optional. You can opt to just have the 'exit' set for example. The advantage to having
# both entry and exit LEDs is, for example, so that 'entry' can display gate status while 'exit' displays the color
# 
# The animation effects requires the installation of Julian Schill's awesome LED effect module otherwise the LEDs
# will be static:
#   https://github.com/julianschill/klipper-led_effect
#
# LED's are indexed in the chain from 1..N. Thus to set up LED's on 'exit' and a single 'status' LED on a 4 gate MMU:
#
#    exit_leds:   neopixel:mmu_leds (1,2,3,4)
#    status_leds: neopixel:mmu_leds (5)
#
# In this example no 'entry' set is configured. Note that constructs like "mmu_leds (1-3,4)" are also valid
#
# The range is completely flexible and can be comprised of different led strips, individual LEDs, or combinations of
# both on different pins. In addition, the ordering is flexible based on your wiring, thus (1-4) and (4-1) both
# represent the same LED range but mapped to increasing or decreasing gates respectively. E.g if you have two Box
# Turtle MMUs, one with a chain of LEDs wired in reverse order and another with individual LEDs, to define 8 exit LEDs:
#
#   exit_leds: neopixel:bt_1 (4-1)
#              neopixel:bt_2a
#              neopixel:bt_2b
#              neopixel:bt_2c
#              neopixel:bt_2d
#
# Note the use of separate lines for each part of the definition,
#
# ADVANCED: Happy Hare provides a convenience wrapper [mmu_led_effect] that not only creates an effect on each of the
# [mmu_leds] specified segments as a whole but also each individual LED for atomic control. See mmu_leds.cfg for examples
#
# (comment out this whole section if you don't have/want leds; uncomment/edit LEDs fitted on your MMU)
#
[mmu_leds unit0]
exit_leds:   neopixel:mmu_leds_1 (1-14)
             neopixel:mmu_leds_2 (1-14)
frame_rate: 24

# Default effects for LED segments when not providing action status
#    off              - LED's off
#    on               - LED's white
#    gate_status      - indicate gate availability / status            (printer.mmu.gate_status)
#    filament_color   - display filament color defined in gate map     (printer.mmu.gate_color_rgb)
#    slicer_color     - display slicer defined set color for each gate (printer.mmu.slicer_color_rgb)
#   (r,g,b)           - display static r,g,b color e.g. "0,0,0.3" for dim blue
#    _effect_         - display the named led effect
#
enabled: True				# True = LEDs are enabled at startup (MMU_LED can control), False = Disabled
animation: True				# True = Use led-animation-effects, False = Static LEDs
default_exit_effect: gate_status	#    off|gate_status|filament_color|slicer_color|r,g,b|_effect_
default_entry_effect: filament_color	#    off|gate_status|filament_color|slicer_color|r,g,b|_effect_
default_status_effect: filament_color	# on|off|gate_status|filament_color|slicer_color|r,g,b|_effect_
default_logo_effect: (0, 0, 0.3)	#    off                                        |r,g,b|_effect_
white_light: (1, 1, 1)			# RGB color for static white light
black_light: (.01, 0, .02)		# RGB color used to represent "black" (filament)
empty_light: (0, 0, 0)			# RGB color used to represent empty gate

# Default effects (animation: True) / static rbg (animation False) to apply to actions
#   effect_name, (r,b,g)
#
# IMPORTANT: Effects must be from [mmu_led_effects] set defined in mmu_hardware.cfg
#
effect_loading:            mmu_blue_clockwise_slow, (0, 0, 0.4)
effect_loading_extruder:   mmu_blue_clockwise_fast, (0, 0, 1)
effect_unloading:          mmu_blue_anticlock_slow, (0, 0, 0.4)
effect_unloading_extruder: mmu_blue_anticlock_fast, (0, 0, 1)
effect_heating:            mmu_breathing_red,       (0.3, 0, 0)
effect_selecting:          mmu_white_fast,          (0.2, 0.2, 0.2)
effect_checking:           mmu_white_fast,          (0.8, 0.8, 0.8)
effect_initialized:        mmu_rainbow,             (0.5, 0.2, 0)
effect_error:              mmu_strobe,              (1, 0, 0)
effect_complete:           mmu_sparkle,             (0.3, 0.3, 0.3)
effect_gate_available:     mmu_static_green,        (0, 0.5, 0)
effect_gate_unknown:       mmu_static_orange,       (0.5, 0.2, 0)
effect_gate_empty:         mmu_static_black,        (0, 0, 0)
effect_gate_selected:      mmu_static_blue,         (0, 0, 1)



# SYNC FEEDBACK SENSOR / BUFFER ---------------------------------------------------------------------------------------
# ██████╗ ██╗   ██╗███████╗███████╗███████╗██████╗
# ██╔══██╗██║   ██║██╔════╝██╔════╝██╔════╝██╔══██╗
# ██████╔╝██║   ██║█████╗  █████╗  █████╗  ██████╔╝
# ██╔══██╗██║   ██║██╔══╝  ██╔══╝  ██╔══╝  ██╔══██╗
# ██████╔╝╚██████╔╝██║     ██║     ███████╗██║  ██║
# ╚═════╝  ╚═════╝ ╚═╝     ╚═╝     ╚══════╝╚═╝  ╚═╝
#
# Sync feedback sensors often called "buffers" are used to synchronize MMU gear stepper movement with the extruder.
# They will typically have a tension switch (most important) or both tension and compression. Note that compression
# switch is useful for use as a endstop to detect hitting the extruder entrance
#
#   'sync_feedback_tension_pin'     .. pin for switch activated when filament is under tension
#   'sync_feedback_compression_pin' .. pin for switch activated when filament is under compression
#
# Configuration is flexible: Simply define pins for any sensor you want to enable, if pin is empty it will be
# ignored or you can also just comment out what you are not using.
#
[mmu_buffer unit0]
sync_feedback_tension_pin: buffer0:PA4
sync_feedback_compression_pin: buffer0:PA5



# ADDITIONAL HARDWARE -------------------------------------------------------------------------------------------------
# ███╗   ███╗██╗███████╗ ██████╗    ██╗  ██╗ █████╗ ██████╗ ██████╗ ██╗    ██╗ █████╗ ██████╗ ███████╗
# ████╗ ████║██║██╔════╝██╔════╝    ██║  ██║██╔══██╗██╔══██╗██╔══██╗██║    ██║██╔══██╗██╔══██╗██╔════╝
# ██╔████╔██║██║███████╗██║         ███████║███████║██████╔╝██║  ██║██║ █╗ ██║███████║██████╔╝█████╗  
# ██║╚██╔╝██║██║╚════██║██║         ██╔══██║██╔══██║██╔══██╗██║  ██║██║███╗██║██╔══██║██╔══██╗██╔══╝  
# ██║ ╚═╝ ██║██║███████║╚██████╗    ██║  ██║██║  ██║██║  ██║██████╔╝╚███╔███╔╝██║  ██║██║  ██║███████╗
# ╚═╝     ╚═╝╚═╝╚══════╝ ╚═════╝    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝
#
# Define any additional hardware for this MMU unit, e.g. heaters, chamber temperature probes, etc
#
[temperature_sensor aht30_left]
sensor_type: AHT10
i2c_mcu: unit0
i2c_bus: i2c1_PA9_PA10
aht10_report_time: 5

[temperature_sensor aht30_right]
sensor_type: AHT10
i2c_mcu: unit0
i2c_bus: i2c3_PA7_PA6
aht10_report_time: 5

[heater_generic MMU_heater_vivid]
gcode_id:  mmu_heater_vivid
heater_pin: unit0:PC14
sensor_type: temperature_combined # PAUL TODO need to add this...
sensor_list: temperature_sensor aht30_left, temperature_sensor aht30_right
combination_method: mean
maximum_deviation: 100
control: pid
pid_Kp=51.604
pid_Ki=1.121
pid_Kd=593.934
min_temp: -100
max_temp: 70

# PAUL ? saftey monitoring..?
#[verify_heater vivid_heater]
#max_error: 300
#check_gain_time: 600
#hysteresis: 10
#heating_gain: 1

[heater_fan MMU_vivid_box_fan]
pin: unit0:PC15
shutdown_speed: 0
heater: MMU_heater_vivid

# Electronics cooling fan
[controller_fan my_controller_fan]
pin: unit0:PA14
stepper: stepper mmu_selector_unit0, stepper mmu_gear_unit0

# PAUL what is this used for?
[temperature_sensor ptc_ntc100k]
sensor_pin: unit0:PA4
sensor_type: Generic 3950
pullup_resistor: 2200
