########################################################################################################################
# Happy Hare MMU Software
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Copyright (C) 2022-2025  moggieuk#6538 (discord)
#                          moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Happy Hare MMU hardware config file for a physical MMU unit
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#


# MCU -----------------------------------------------------------------------------------------------------------------
# ███╗   ███╗ ██████╗██╗   ██╗
# ████╗ ████║██╔════╝██║   ██║
# ██╔████╔██║██║     ██║   ██║
# ██║╚██╔╝██║██║     ██║   ██║
# ██║ ╚═╝ ██║╚██████╗╚██████╔╝
# ╚═╝     ╚═╝ ╚═════╝ ╚═════╝ 
#
# Define MCU(s) used to connect with this MMU unit and setup temperature monitoring
#
# Serial connections are defined similar to:
#    serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_4F0034000A50425539393020-if00
# CANbus similar to:
#    canbus_uuid: 1234567890
#
[mcu unit0]
serial: [[PARAM_SERIAL]]

[temperature_sensor MCU_mmu_unit0]
sensor_type: temperature_mcu
sensor_mcu: unit0

[% if PARAM_SERIAL_BUFFER %]
[mcu buffer0]
serial: [[PARAM_SERIAL_BUFFER]]

[temperature_sensor MCU_buffer]
sensor_type: temperature_mcu
sensor_mcu: buffer
[% endif %]


# MMU UNIT ------------------------------------------------------------------------------------------------------------
# ███╗   ███╗███╗   ███╗██╗   ██╗    ██╗   ██╗███╗   ██╗██╗████████╗
# ████╗ ████║████╗ ████║██║   ██║    ██║   ██║████╗  ██║██║╚══██╔══╝
# ██╔████╔██║██╔████╔██║██║   ██║    ██║   ██║██╔██╗ ██║██║   ██║   
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║    ██║   ██║██║╚██╗██║██║   ██║   
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝    ╚██████╔╝██║ ╚████║██║   ██║   
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝      ╚═════╝ ╚═╝  ╚═══╝╚═╝   ╚═╝   
#
# A mmu_unit is a physical MMU. It describes the type, characteristics and capabilities (often defined by vendor).
# The name of the unit is used to locate other compoents including it's toolhead steppers, optional encoder
# and espooler. You should create a [mmu_unit XXX] section for every MMU connected to this printer. The XXX
# name should appear in the 'units' on the [mmu_machine] and be used in the mmu_toolhead and accessary name
# as illustrated
#
[mmu_unit unit0]

num_gates: [[PARAM_NUM_GATES]]			# Number of gates/lanes *this* mmu_unit

# MMU Vendor & Version is used to automatically configure some parameters and validate configuration
# If custom set to "Other" and uncomment the additional parameters below
#
# 3D Chameleon  1.0
# 3MS           1.0
# AngryBeaver   1.0
# BoxTurtle     1.0
# ERCF          1.1  add "s" suffix for Springy, "b" for Binky, "t" for Triple-Decky
#                    e.g. "1.1sb" for v1.1 with Springy mod and Binky encoder
# ERCF          2.0  community edition ERCFv2
# KMS           1.0
# MMX           1.0
# NightOwl      1.0
# Pico          1.0
# Prusa         3.0  NOT YET SUPPORTED - COMMING SOON
# Tradrack      1.0  add "e" if encoder is fitted (assumed to be Binky)
# VVD           1.0  BTT ViViD
# Other              Generic setup that will require further customization below
#
vendor: [[PARAM_MMU_VENDOR]]			# MMU family
version: [[PARAM_MMU_VERSION]]			# MMU hardware version number (add mod suffix documented above)
#
# The following attributes are set internally from vendor/version above. Only uncomment to customize the vendor
# default if you known what you are doing or for custom ("Other") designs
#
#selector_type: [[PARAM_SELECTOR_TYPE]]		# E.g. LinearSelector (type-A), VirtualSelector (type-B), MacroSelector, RotarySelector, ...
#variable_bowden_lengths: [[PARAM_VARIABLE_BOWDEN_LENGTHS]]		# 1 = If MMU design has different bowden lengths per gate, 0 = bowden length is the same
#variable_rotation_distances: [[PARAM_VARIABLE_ROTATION_DISTANCES]]		# 1 = If MMU design has dissimilar drive/BMG gears, thus rotation distance, 0 = One drive gear (e.g. Tradrack)
#require_bowden_move: [[PARAM_REQUIRE_BOWDEN_MOVE]]			# 1 = If MMU design has bowden move that is included in load/unload, 0 = zero length bowden (skip bowden move)
#filament_always_gripped: [[PARAM_FILAMENT_ALWAYS_GRIPPED]]		# 1 = Filament is always trapped by MMU (most type-B designs), 0 = MMU can release filament
#has_bypass: [[PARAM_HAS_BYPASS]]				# 1 = Bypass gate available, 0 = No filament bypass possible

#display_name: My Precious		# Display name of mmu_unit in UI's. Defaults to the vendor name
encoder: unit0				# Name of encoder if fitted (can be shared with other mmu_units)
buffer: unit0				# Name of sync-feeback buffer if fitted (can be shared with other mmu_units))



# MMU TOOLHEAD ========================================================================================================
# ███╗   ███╗███╗   ███╗██╗   ██╗    ████████╗ ██████╗  ██████╗ ██╗     ██╗  ██╗███████╗ █████╗ ██████╗ 
# ████╗ ████║████╗ ████║██║   ██║    ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██║  ██║██╔════╝██╔══██╗██╔══██╗
# ██╔████╔██║██╔████╔██║██║   ██║       ██║   ██║   ██║██║   ██║██║     ███████║█████╗  ███████║██║  ██║
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║       ██║   ██║   ██║██║   ██║██║     ██╔══██║██╔══╝  ██╔══██║██║  ██║
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝       ██║   ╚██████╔╝╚██████╔╝███████╗██║  ██║███████╗██║  ██║██████╔╝
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝        ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ 
#
# Each mmu_unit has a "toolhead" that is similar to a printer toolhead and created automatically based on hardware
# described below. It is always composed of one or more filament drive (gear) steppers, optionally, depending on type,
# a selector stepper and/or a servo
#
# Note about "touch" endstops: Happy Hare provides extremely flexible homing options using both single steppers or
# synced steppers. The "touch" option leverages stallguard and thus requires the appropriate 'diag_pin' and stallguard
# parameters set on the TMC driver section. If you have the diag_pin exposed, it is harmless to define this because
# they will only be used when explicitly needed and configured.
#
# Touch option for each stepper provides these benefits / possibilities (experimental):
#  - on extruder stepper allows for the automatic detection of the nozzle!
#  - on selector stepper allows for the automatic detection of filament stuck in the gate and subsequent recovery
#  - on gear stepper allows for the automatic detection of the extruder entrance
#
# In summary, "touch" homing with your MMU is an advanced option that requires patience and careful tuning. Everything
# works with regular endstops and there are workaround options for certain homing points (like extruder entry) in
# the absence of any endstop. I'm really interested in creative setups. Ping me on Discord (moggieuk#6538)


# FILAMENT DRIVE GEAR STEPPER(S) --------------------------------------------------------------------------------------
#  ██████╗ ███████╗ █████╗ ██████╗
# ██╔════╝ ██╔════╝██╔══██╗██╔══██╗
# ██║  ███╗█████╗  ███████║██████╔╝
# ██║   ██║██╔══╝  ██╔══██║██╔══██╗
# ╚██████╔╝███████╗██║  ██║██║  ██║
#  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
#
# Note that 'toolhead' & 'mmu_gear' endstops will automatically be added if a toolhead sensor or gate sensor is defined
#
[tmc2209 stepper_mmu_gear_unit0]
uart_pin: [[PIN_GEAR_UART]]
[% if BOARD_TYPE_EASY_BRD and not BOOL_ENABLE_SELECTOR_TOUCH %]
uart_address: 0 			# Only for old EASY-BRD mcu
[% endif %]
run_current: [[PARAM_GEAR_RUN_CURRENT]]
hold_current: [[PARAM_GEAR_HOLD_CURRENT]]			# Recommend to be small if not using "touch" or move (TMC stallguard)
interpolate: True
sense_resistor: 0.110			# Usually 0.11, 0.15 for BTT TMC2226
stealthchop_threshold: 0		# Spreadcycle has more torque and better at speed
uart_pin: mmu:MMU_GEAR_UART

# Uncomment two lines below if you have TMC and want the ability to use filament "touch" homing with gear stepper
#diag_pin: [[PIN_GEAR_DIAG]]		# Set to MCU pin connected to TMC DIAG pin for gear stepper
#driver_SGTHRS: 60			# 255 is most sensitive value, 0 is least sensitive

[stepper_mmu_gear_unit0]
step_pin: [[PIN_GEAR_STEP]]
dir_pin: [[PIN_GEAR_DIR]]
enable_pin: [[PIN_GEAR_ENABLE]]
rotation_distance: [[PARAM_GEAR_ROTATION_DISTANCE]]		# Typically 22.73 for Bondtech. Overriden by 'mmu_gear_rotation_distance' in mmu_vars.cfg
gear_ratio: [[PARAM_GEAR_GEAR_RATIO]]			# E.g. ERCF 80:20, Tradrack 50:17
microsteps: 16 				# Recommend 16. Increase only if you "step compress" issues when syncing
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree

# Uncomment the two lines below to enable filament "touch" homing option with gear motor
#extra_endstop_pins: tmc2209_stepper_mmu_gear:virtual_endstop
#extra_endstop_names: mmu_gear_touch

[% if not MMU_HAS_SELECTOR and not MMU_HAS_SERVO %]
# ADDITIONAL FILAMENT DRIVE GEAR STEPPERS FOR TYPE-B MMU's ------------------------------------------------------------
# Note that common parameters are inherited from base stepper_mmu_gear, but can be uniquely specified here too
#
# Filament Drive Gear_1 --------------------------
[% for i in range(1, PARAM_NUM_GATES|int) %]
[tmc2209 stepper_mmu_gear_unit0_[[i]]]
uart_pin: [[ (PIN_GEAR_UART_|d)[i] ]]

[stepper_mmu_gear_[[i]]]
step_pin: [[ (PIN_GEAR_STEP_|d)[i] ]]
dir_pin: [[ (PIN_GEAR_DIR_|d)[i] ]]
enable_pin: [[ (PIN_GEAR_ENABLE_|d)[i] ]]
# diag_pin: [[ (PIN_GEAR_DIAG_|d)[i] ]]		# TODO: Is this required? 
[% endfor %]
[% endif %]

[% if MMU_HAS_SELECTOR %]

# SELECTOR STEPPER ----------------------------------------------------------------------------------------------------
# ███████╗███████╗██╗     ███████╗ ██████╗████████╗ ██████╗ ██████╗ 
# ██╔════╝██╔════╝██║     ██╔════╝██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗
# ███████╗█████╗  ██║     █████╗  ██║        ██║   ██║   ██║██████╔╝
# ╚════██║██╔══╝  ██║     ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗
# ███████║███████╗███████╗███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║
# ╚══════╝╚══════╝╚══════╝╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝
#
# Consult doc if you want to setup selector for "touch" homing instead or physical endstop
#
[tmc2209 stepper_mmu_selector_unit0]
uart_pin: [[PIN_SELECTOR_UART]]
[% if BOARD_TYPE_EASY_BRD %]
uart_address: 1 			# Only for old EASY-BRD mcu
[% endif %]
run_current: [[PARAM_SELECTOR_RUN_CURRENT]]
hold_current: [[PARAM_SELECTOR_HOLD_CURRENT]]			# Can be small if not using "touch" movement (TMC stallguard)
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 100		# Stallguard "touch" movement (slower speeds) best done with stealthchop

# Uncomment two lines below if you have TMC and want to use selector "touch" movement
[% if BOOLENABLE_SELECTOR_TOUCH and PIN_SELECTOR_DIAG|d != "" %]
diag_pin: [[PIN_SELECTOR_DIAG]] 		# Set to MCU pin connected to TMC DIAG pin for selector stepper
driver_SGTHRS: 75			# 255 is most sensitive value, 0 is least sensitive
[% else %]
#diag_pin: [[PIN_SELECTOR_DIAG]] 		# Set to MCU pin connected to TMC DIAG pin for selector stepper
#driver_SGTHRS: 75			# 255 is most sensitive value, 0 is least sensitive
[% endif %]

[stepper_mmu_selector_unit0]
step_pin: [[PIN_SELECTOR_STEP]]
dir_pin: [[PIN_SELECTOR_DIR]]
enable_pin: [[PIN_SELECTOR_ENABLE]],
rotation_distance: 40
microsteps: 16 				# Don't need high fidelity
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
endstop_pin: [[PIN_SELECTOR_ENDSTOP]]	# Selector microswitch
endstop_name: mmu_sel_home
#homing_retract_dist: 0			# Uncomment ONLY if default endstop above is using stallguard

# Uncomment two lines below to give option of selector "touch" movement
[% if BOOLENABLE_SELECTOR_TOUCH and PIN_SELECTOR_DIAG|d != "" %]
extra_endstop_pins: tmc2209_stepper_mmu_selector:virtual_endstop
extra_endstop_names: mmu_sel_touch
[% else %]
#extra_endstop_pins: tmc2209_stepper_mmu_selector:virtual_endstop
#extra_endstop_names: mmu_sel_touch
[% endif %]

[% if MMU_HAS_SERVO %]
# SELECTOR SERVO ------------------------------------------------------------------------------------------------------
# ███████╗███████╗██╗            ███████╗███████╗██████╗ ██╗   ██╗ ██████╗ 
# ██╔════╝██╔════╝██║            ██╔════╝██╔════╝██╔══██╗██║   ██║██╔═══██╗
# ███████╗█████╗  ██║            ███████╗█████╗  ██████╔╝██║   ██║██║   ██║
# ╚════██║██╔══╝  ██║            ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██║   ██║
# ███████║███████╗███████╗██╗    ███████║███████╗██║  ██║ ╚████╔╝ ╚██████╔╝
# ╚══════╝╚══════╝╚══════╝╚═╝    ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝   ╚═════╝ 
#
# Basic servo PWM setup. Note that if these values are changed then any calibrated angles will also change
#
[mmu_servo unit0]
pin: [[PIN_SELECTOR_SERVO]]
maximum_servo_angle: [[PARAM_SERVO_MAX_ANGLE]]
minimum_pulse_width: [[PARAM_SERVO_MIN_PULSE_WIDTH]]
maximum_pulse_width: [[PARAM_SERVO_MAX_PULSE_WIDTH]]
[% endif %] # MMU_HAS_SERVO

[% endif %] # MMU_HAS_SELECTOR

# END OF MMU TOOLHEAD ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



# FILAMENT SENSORS ----------------------------------------------------------------------------------------------------
# ███████╗███████╗███╗   ██╗███████╗ ██████╗ ██████╗ ███████╗
# ██╔════╝██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝
# ███████╗█████╗  ██╔██╗ ██║███████╗██║   ██║██████╔╝███████╗
# ╚════██║██╔══╝  ██║╚██╗██║╚════██║██║   ██║██╔══██╗╚════██║
# ███████║███████╗██║ ╚████║███████║╚██████╔╝██║  ██║███████║
# ╚══════╝╚══════╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝
#
# Define the pins for optional sensors in the filament path. A single [mmu_sensors] section is defined to cover ALL
# the gates of the mmu_unit and gate numbers always start with 0. All but the pre-gate sensors will be automatically
# setup as both endstops (for homing) and sensors for visibility purposes
#
#   'pre_gate_switch_pin_X'  .. 'mmu_pre_gate_X' sensor detects filament at entry to MMU. X=gate number (0..N)
#   'post_gear_switch_pin_X' .. 'mmu_gear_X' post gear sensor for each filament
#   'gate_switch_pin'        .. 'mmu_gate' shared sensor detects filament past the gate of this MMU
#
# Configuration is flexible: Simply define pins for any sensor you want to enable, if pin is empty it will be
# ignored or you can also just comment out what you are not using.
#
[mmu_sensors unit0]
[% for i in range(0, PARAM_NUM_GATES|int) %]
pre_gate_switch_pin_[[i]]: [[ (PIN_PRE_GATE_|d)[i] ]] 
[% endfor %]

[% for i in range(0, PARAM_NUM_GATES|int) %]
post_gear_switch_pin_[[i]]: [[ (PIN_POST_GEAR_|d)[i] ]] 
[% endfor %]

gate_switch_pin: [[PIN_GATE_SENSOR]]

[% if MMU_HAS_ESPOOLER %]

# ESPOOLER (OPTIONAL) -------------------------------------------------------------------------------------------------
# ███████╗███████╗██████╗  ██████╗  ██████╗ ██╗     ███████╗██████╗
# ██╔════╝██╔════╝██╔══██╗██╔═══██╗██╔═══██╗██║     ██╔════╝██╔══██╗
# █████╗  ███████╗██████╔╝██║   ██║██║   ██║██║     █████╗  ██████╔╝
# ██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║   ██║██║     ██╔══╝  ██╔══██╗
# ███████╗███████║██║     ╚██████╔╝╚██████╔╝███████╗███████╗██║  ██║
# ╚══════╝╚══════╝╚═╝      ╚═════╝  ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝
#
# An espooler controls DC motors (typically N20) that are able to rewind a filament spool and optionally provide
# forward assist to overcome spooler rotation friction. This should define pins for each of the gates on your mmu
# starting with '_0'. 
# An empty pin can be deleted, commented or simply left blank. If you mcu has a separate "enable" pin
#
[mmu_espooler unit0]
pwm: 1                                          # 1=PWM control (typical), 0=digital on/off control
#hardware_pwm: 0                                # See klipper doc
#cycle_time: 0.100                              # See klipper doc
scale: 1                                        # Scales the PWM output range
#value: 0					# See klipper doc
#shutdown_value: 0				# See klipper doc

[% for i in range(0, PARAM_NUM_GATES|int) %]
respool_motor_pin_[[i]]: [[i]]=[[ (PIN_ESPOOLER_RWD_|d)[i] ]]	# PWM (or digital) pin for rewind/respool movement
assist_motor_pin_[[i]]: [[ (PIN_ESPOOLER_FWD_|d)[i] ]]	# PWM (or digital) pin for forward motor movement
enable_motor_pin_[[i]]: [[ (PIN_ESPOOLER_EN_|d)[i] ]]	# Digital output for Afc mcu
assist_trigger_pin_[[i]]: [[ (PIN_ESPOOLER_TRIG_|d)[i] ]]	# Trigger pin for sensing need to assist during print
[% endfor %]

[% endif %] # MMU_HAS_ENCODER

[% if MMU_HAS_LEDS %]

# LED SUPPORT (OPTIONAL) -----------------------------------------------------------------------------------------------
# ██╗     ███████╗██████╗ ███████╗
# ██║     ██╔════╝██╔══██╗██╔════╝
# ██║     █████╗  ██║  ██║███████╗
# ██║     ██╔══╝  ██║  ██║╚════██║
# ███████╗███████╗██████╔╝███████║
# ╚══════╝╚══════╝╚═════╝ ╚══════╝
#
# Define mmu leds, both the "neopixel" config and [mmu_led] to define their purpose
#
# (comment out this section if you don't have leds or have them defined elsewhere)
#
[neopixel mmu_leds]
pin: [[PIN_NEOPIXEL]]
chain_count: [[PARAM_CHAIN_COUNT]]			# Count much be feasible e.g. N-leds per gate plus extra segments
color_order: [[PARAM_COLOR_ORDER]]		# Set based on your particular neopixel specification (can be comma separated list)

# MMU LED EFFECT SEGMENTS ----------------------------------------------------------------------------------------------
# Define neopixel LEDs for your MMU. The chain_count must be large enough for your desired ranges:
#   exit   .. this set of LEDs, one for every gate, usually would be mounted at the exit point of the gate
#   entry  .. this set of LEDs, one for every gate, could be mounted at the entry point of filament into this MMU/buffer
#   status .. these LED. represents the status of the MMU (and selected filament). More than one status LED is possible
#   logo   .. these LEDs don't change during operation and are designed lighting a logo. Multiple logo LEDs are possible
#
# Note that all sets are optional. You can opt to just have the 'exit' set for example. The advantage to having
# both entry and exit LEDs is, for example, so that 'entry' can display gate status while 'exit' displays the color
# 
# The animation effects requires the installation of Julian Schill's awesome LED effect module otherwise the LEDs
# will be static:
#   https://github.com/julianschill/klipper-led_effect
#
# LED's are indexed in the chain from 1..N. Thus to set up LED's on 'exit' and a single 'status' LED on a 4 gate MMU:
#
#    exit_leds:   neopixel:mmu_leds (1,2,3,4)
#    status_leds: neopixel:mmu_leds (5)
#
# In this example no 'entry' set is configured. Note that constructs like "mmu_leds (1-3,4)" are also valid
#
# The range is completely flexible and can be comprised of different led strips, individual LEDs, or combinations of
# both on different pins. In addition, the ordering is flexible based on your wiring, thus (1-4) and (4-1) both
# represent the same LED range but mapped to increasing or decreasing gates respectively. E.g if you have two Box
# Turtle MMUs, one with a chain of LEDs wired in reverse order and another with individual LEDs, to define 8 exit LEDs:
#
#   exit_leds: neopixel:bt_1 (4-1)
#              neopixel:bt_2a
#              neopixel:bt_2b
#              neopixel:bt_2c
#              neopixel:bt_2d
#
# Note the use of separate lines for each part of the definition,
#
# ADVANCED: Happy Hare provides a convenience wrapper [mmu_led_effect] that not only creates an effect on each of the
# [mmu_leds] specified segments as a whole but also each individual LED for atomic control. See mmu_leds.cfg for examples
#
# (comment out this whole section if you don't have/want leds; uncomment/edit LEDs fitted on your MMU)
#
[mmu_leds unit0]
exit_leds:   [[PARAM_EXIT_LEDS]]
entry_leds:  [[PARAM_ENTRY_LEDS]]
status_leds: [[PARAM_STATUS_LEDS]]
logo_leds:   [[PARAM_LOGO_LEDS]]
frame_rate: 24

# Default effects for LED segments when not providing action status
#    off              - LED's off
#    on               - LED's white
#    gate_status      - indicate gate availability / status            (printer.mmu.gate_status)
#    filament_color   - display filament color defined in gate map     (printer.mmu.gate_color_rgb)
#    slicer_color     - display slicer defined set color for each gate (printer.mmu.slicer_color_rgb)
#   (r,g,b)           - display static r,g,b color e.g. "0,0,0.3" for dim blue
#    _effect_         - display the named led effect
#
enabled: True				# True = LEDs are enabled at startup (MMU_LED can control), False = Disabled
animation: True				# True = Use led-animation-effects, False = Static LEDs
exit_effect: gate_status		#    off|gate_status|filament_color|slicer_color|r,g,b|_effect_
entry_effect: filament_color		#    off|gate_status|filament_color|slicer_color|r,g,b|_effect_
status_effect: filament_color		# on|off|gate_status|filament_color|slicer_color|r,g,b|_effect_
logo_effect: (0, 0, 0.3)		#    off                                        |r,g,b|_effect_
white_light: (1, 1, 1)			# RGB color for static white light
black_light: (.01, 0, .02)		# RGB color used to represent "black" (filament)
empty_light: (0, 0, 0)			# RGB color used to represent empty gate

# Default effects (animation: True) / static rbg (animation False) to apply to actions
#   effect_name, (r,b,g)
#
# IMPORTANT: Effects must be from [mmu_led_effects] set defined in mmu_hardware.cfg
#
effect_loading:            mmu_blue_clockwise_slow, (0, 0, 0.4)
effect_loading_extruder:   mmu_blue_clockwise_fast, (0, 0, 1)
effect_unloading:          mmu_blue_anticlock_slow, (0, 0, 1)
effect_unloading_extruder: mmu_blue_anticlock_fast, (0, 0, 1)
effect_heating:            mmu_breathing_red,       (0.3, 0, 0)
effect_selecting:          mmu_white_fast,          (0.2, 0.2, 0.2)
effect_checking:           mmu_white_fast,          (0.8, 0.8, 0.8)
effect_initialized:        mmu_rainbow,             (0.5, 0.2, 0)
effect_error:              mmu_strobe,              (1, 0, 0)
effect_complete:           mmu_sparkle,             (0.3, 0.3, 0.3)
effect_gate_available:     mmu_static_green,        (0, 0.5, 0)
effect_gate_unknown:       mmu_static_orange,       (0.5, 0.2, 0)
effect_gate_empty:         mmu_static_black,        (0, 0, 0)
effect_gate_selected:      mmu_static_blue,         (0, 0, 1)

[% endif %] # MMU_HAS_LEDS

[% if MMU_HAS_BUFFER %]

# SYNC FEEDBACK SENSOR / BUFFER ---------------------------------------------------------------------------------------
# ██████╗ ██╗   ██╗███████╗███████╗███████╗██████╗
# ██╔══██╗██║   ██║██╔════╝██╔════╝██╔════╝██╔══██╗
# ██████╔╝██║   ██║█████╗  █████╗  █████╗  ██████╔╝
# ██╔══██╗██║   ██║██╔══╝  ██╔══╝  ██╔══╝  ██╔══██╗
# ██████╔╝╚██████╔╝██║     ██║     ███████╗██║  ██║
# ╚═════╝  ╚═════╝ ╚═╝     ╚═╝     ╚══════╝╚═╝  ╚═╝
#
# Sync feedback sensors often called "buffers" are used to synchronize MMU gear stepper movement with the extruder.
# They will typically have a tension switch (most important) or both tension and compression. Note that compression
# switch is useful for use as a endstop to detect hitting the extruder entrance
#
#   'sync_feedback_tension_pin'     .. pin for switch activated when filament is under tension
#   'sync_feedback_compression_pin' .. pin for switch activated when filament is under compression
#
# Configuration is flexible: Simply define pins for any sensor you want to enable, if pin is empty it will be
# ignored or you can also just comment out what you are not using.
#
[mmu_buffer unit0]
sync_feedback_tension_pin: [[PIN_SYNC_FEEDBACK_TENSION]]
sync_feedback_compression_pin: [[PIN_SYNC_FEEDBACK_COMPRESSION]]

[% endif %] # MMU_HAS_BUFFER

[% if MMU_HAS_ENCODER %]

# ENCODER (OPTIONAL) --------------------------------------------------------------------------------------------------
# ███████╗███╗   ██╗ ██████╗ ██████╗ ██████╗ ███████╗██████╗ 
# ██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔══██╗
# █████╗  ██╔██╗ ██║██║     ██║   ██║██║  ██║█████╗  ██████╔╝
# ██╔══╝  ██║╚██╗██║██║     ██║   ██║██║  ██║██╔══╝  ██╔══██╗
# ███████╗██║ ╚████║╚██████╗╚██████╔╝██████╔╝███████╗██║  ██║
# ╚══════╝╚═╝  ╚═══╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝
#
# Encoder measures distance, monitors for runout and clogging and constantly calculates % flow rate
# Note that the encoder_resolution set here is a default to get started. It will be correcly set after calibration
# with the value stored in mmu_vars.cfg
#
# The encoder resolution will be calibrated but it needs a default approximation 
# If BMG gear based:
#   resolution = bmg_circumfrance / (2 * teeth)
# 24 / (2 * 17) = 0.7059 for TRCT5000 based sensor
# 24 / (2 * 12) = 1.0 for Binky with 12 tooth disc
#
[mmu_encoder unit0]
encoder_pin: [[PIN_ENCODER]]
encoder_resolution: [[PARAM_ENCODER_RESOLUTION]]			# This is just a starter value. Overriden by calibrated 'mmu_encoder_resolution' in mmm_vars.cfg
desired_headroom: 5.0		# The clog/runout headroom that MMU attempts to maintain (closest point to triggering runout)
average_samples: 4		# The "damping" effect of last measurement (higher value means slower automatic clog_length reduction)
flowrate_samples: 20		# How many "movements" of the extruder to measure average flowrate over

[% endif %] # MMU_HAS_ENCODER


# ADDITIONAL HARDWARE -------------------------------------------------------------------------------------------------
# ███╗   ███╗██╗███████╗ ██████╗    ██╗  ██╗ █████╗ ██████╗ ██████╗ ██╗    ██╗ █████╗ ██████╗ ███████╗
# ████╗ ████║██║██╔════╝██╔════╝    ██║  ██║██╔══██╗██╔══██╗██╔══██╗██║    ██║██╔══██╗██╔══██╗██╔════╝
# ██╔████╔██║██║███████╗██║         ███████║███████║██████╔╝██║  ██║██║ █╗ ██║███████║██████╔╝█████╗  
# ██║╚██╔╝██║██║╚════██║██║         ██╔══██║██╔══██║██╔══██╗██║  ██║██║███╗██║██╔══██║██╔══██╗██╔══╝  
# ██║ ╚═╝ ██║██║███████║╚██████╗    ██║  ██║██║  ██║██║  ██║██████╔╝╚███╔███╔╝██║  ██║██║  ██║███████╗
# ╚═╝     ╚═╝╚═╝╚══════╝ ╚═════╝    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝
#
# Define any additional hardware for this MMU unit, e.g. heaters, enclosure temperature probes, etc
#
[[PARAM_MISC_HARDWARE]]
