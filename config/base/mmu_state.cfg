########################################################################################################################
# Happy Hare MMU Software
# Supporting macros
#
# THIS FILE IS READ ONLY
#
# Copyright (C) 2022-2025  moggieuk#6538 (discord)
#                          moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Callouts for Happy Hare state changes
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#


###########################################################################
# Called when when the MMU action status changes
#
# The `ACTION` parameter will contain the current action string
# (also available in `printer.mmu.action` printer variable).
# Also the previous action is available in `OLD_ACTION`.
#
# See Happy Hare README for full list of action strings, but a quick ref is:
#
#  Idle|Loading|Unloading|Loading Ext|Exiting Ext|Heating|Checking|Homing|Selecting
#  Forming Tip|Cutting Tip|Cutting Filament|Purging
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_ACTION_CHANGED]
description: Called when an action has changed
gcode:
    {% set vars = printer['gcode_macro _MMU_STATE_VARS'] %}
    {% set action = params.ACTION|string %}
    {% set old_action = params.OLD_ACTION|string %}

    _MMU_LED_ACTION_CHANGED {rawparams}

    {% if not vars.user_action_changed_extension == "" %} 
        {vars.user_action_changed_extension} {rawparams}
    {% endif %}


###########################################################################
# Called when the MMU print state changes
#
# The `STATE` parameter will contain the current state string
# (also available in `printer.mmu.print_state` printer variable)
# Also the previous action is available in `OLD_STATE`.
#
# See Happy Hare README for full list of state strings and the state transition
# diagram, but a quick ref is:
#
#  initialized|ready|started|printing|complete|cancelled|error|pause_locked|paused|standby
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_PRINT_STATE_CHANGED]
description: Called when print state changes
gcode:
    {% set vars = printer['gcode_macro _MMU_STATE_VARS'] %}
    {% set state = params.STATE|string %}
    {% set old_state = params.OLD_STATE|string %}

    _MMU_LED_PRINT_STATE_CHANGED {rawparams}

    {% if not vars.user_print_state_changed_extension == "" %} 
        {vars.user_print_state_changed_extension} {rawparams}
    {% endif %}


###########################################################################
# Called when an atomic event occurs. Different from ACTION_CHANGE because
# these are not necessarily part of any important state change but rather
# informational
#
# The `EVENT` parameter will contain the event name. Other parameters
# depend on the event type
#
# See Happy Hare README for full list of event strings, but a quick ref is:
#
# Events:
#   "restart"              Called when Happy Hare starts / restarts
#       Parameters: None
#
#   "gate_map_changed"    Called when the MMU gate_map (containing information
#                         about the filament type, color, availability and
#                         spoolId) is updated
#       Parameters: GATE  The gate that is updated or -1 if all updated
#
#   "filament_gripped"    Called when MMU servo (if fitted) grips filament
#       Parameters: None
#
#   "filament_cut"        Called when filament is cut
#       Parameters: None
#
# The reference logic here updates counters and drives optional LED's
#
[gcode_macro _MMU_EVENT]
description: Called when certain MMU actions occur
gcode:
    {% set vars = printer['gcode_macro _MMU_STATE_VARS'] %}
    {% set servo_down_limit = vars.servo_down_limit|default(-1)|int %}
    {% set cutter_blade_limit = vars.cutter_blade_limit|default(-1)|int %}
    {% set event = params.EVENT|string %}

    {% if event == "restart" %}
        MMU_STATS COUNTER=mmu_restarts INCR=1

        {% set vendor = printer.configfile.config.mmu_machine.mmu_vendor|string|lower %}
        {% set version = printer.configfile.config.mmu_machine.mmu_version|string|lower %}
        {% if vendor == "ercf" %}
            MMU_STATS COUNTER=servo_down LIMIT={servo_down_limit} WARNING="Inspect servo arm for wear/damage"
            MMU_STATS COUNTER=cutter_blade LIMIT={cutter_blade_limit} WARNING="Inspect/replace filament cutting blade"
        {% elif vendor == "tradrack" %}
            MMU_STATS COUNTER=servo_down LIMIT={servo_down_limit} WARNING="Inspect servo mechanism for wear/damage"
            MMU_STATS COUNTER=cutter_blade LIMIT={cutter_blade_limit} WARNING="Inspect/replace filament cutting blade"
        {% endif %}

    {% elif event == "gate_map_changed" %}
        _MMU_LED_GATE_MAP_CHANGED {rawparams}
    {% elif event == "filament_gripped" %}
        MMU_STATS COUNTER=servo_down INCR=1
    {% elif event == "filament_cut" %}
        MMU_STATS COUNTER=cutter_blade INCR=1
    {% endif %}

    {% if not vars.user_mmu_event_extension == "" %} 
        {vars.user_mmu_event_extension} {rawparams}
    {% endif %}

