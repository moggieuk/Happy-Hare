########################################################################################################################
# Happy Hare MMU Software
# Supporting macros
#
# THIS FILE IS READ ONLY
#
# Copyright (C) 2022  moggieuk#6538 (discord) moggieuk@hotmail.com
#
# Portions integrated from mainsail.cfg
# Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Complimentary and functional "client" macros that work with MMU enabled or disabled
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#
#
# These are the recommended PAUSE/RESUME/CANCEL_PRINT macros for use with
# Happy Hare that use the parking logic defined in 'mmu_sequence.cfg' and are
# centrally configured in 'mmu_macro_vars.cfg'
#
# (Technically you can also use your own set but you will likely need to
# modify configuration to avoid double retraction, etc)
#
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
gcode:
    {% set vars = printer['gcode_macro _MMU_CLIENT_VARS'] %}

    {% if printer.pause_resume.is_paused %}
        MMU_LOG MSG="Print is already paused"
    {% else %}
        _MMU_SAVE_POSITION
        BASE_PAUSE
        {% if not printer.mmu.enabled %}
            _MMU_PARK OPERATION="pause"
        {% endif %}
        {vars.user_pause_extension|default("")}
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
description: Resume the print
gcode:
    {% set vars = printer['gcode_macro _MMU_CLIENT_VARS'] %}

    {% if not printer.pause_resume.is_paused %}
        MMU_LOG MSG="Print is not paused. Resume ignored"
    {% else %}
        {vars.user_resume_extension|default("")}
        {% if not printer.mmu.enabled %}
            _MMU_RESTORE_POSITION	# This will take the correct "over and down" movement path and unretract
        {% endif %}
        BASE_RESUME
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Cancel print
gcode:
    {% set vars = printer['gcode_macro _MMU_CLIENT_VARS'] %}
    {% set reset_ttg_on_cancel = vars.reset_ttg_on_cancel|default('true')|lower == 'true' %}
    {% set unload_tool_on_cancel = vars.unload_tool_on_cancel|default('false')|lower == 'true' %}

    MMU_LOG MSG="Print cancelled!"
    {% if not printer.mmu.enabled %}
        _MMU_PARK OPERATION="cancel"
    {% else %}
        {% if unload_tool_on_cancel %}
            MMU_LOG MSG="Ejecting filament on print cancel"
            MMU_EJECT RESTORE=0
        {% endif %}
        {% if reset_ttg_on_cancel %}
            MMU_TTG_MAP RESET=1 QUIET=1
        {% endif %}
    {% endif %}
    _MMU_CLEAR_POSITION
    TURN_OFF_HEATERS
    M107 ; Fan off
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    {vars.user_cancel_extension|default("")}
    BASE_CANCEL_PRINT


# The following macros are copied from the Mainsail client macros (mainsail.cfg)
# They are integrated here to add the extra functionality into the Happy Hare
# client_macros whilst still retaining centralized and consistent parking logic
#
# Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
    {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
    {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
    {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
    {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
    {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined else params.LAYER is defined %}
    {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
    {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER=<current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
    {% if pause_next_layer.enable %}
        MMU_LOG MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
        {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
        SET_PAUSE_NEXT_LAYER ENABLE=0
    {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
        MMU_LOG MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
        {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
        SET_PAUSE_AT_LAYER ENABLE=0
    {% endif %}
    SET_PRINT_STATS_INFO_BASE {rawparams}
